[
    {
        "id": "fca77f132c7d5d8f",
        "type": "tab",
        "label": "SunSynk Gather",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8ca6ebb9883a33b8",
        "type": "function",
        "z": "fca77f132c7d5d8f",
        "name": "Get Bearer Token",
        "func": "if (typeof msg.payload === 'object') { } else {\n    if (msg.payload.includes(\"RequestError\")) {\n        node.status(\"Request Error\");\n    } else {\n        node.status(\"Unknown Error\");\n    }\n    node.error(msg.payload);\n    return null;\n}\n\nvar origpayload = msg.payload;\nif (origpayload.msg == \"Success\") \n{\n    msg.payload = msg.payload.data.access_token;\n    let currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString());\n    if (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\n    return msg\n} else {\n    msg.payload = {};\n    node.status(origpayload.msg)\n    node.error({ state: origpayload.msg, data: origpayload });\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 160,
        "wires": [
            [
                "6155d4c7e8e87975"
            ]
        ]
    },
    {
        "id": "53ea109abab17477",
        "type": "http request",
        "z": "fca77f132c7d5d8f",
        "name": "Get Invertor Serial Number",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 440,
        "y": 300,
        "wires": [
            [
                "e53175753e61992a",
                "90673d2b7f54dc55"
            ]
        ]
    },
    {
        "id": "6155d4c7e8e87975",
        "type": "function",
        "z": "fca77f132c7d5d8f",
        "name": "Add Bearer Auth",
        "func": "msg.headers = {\n    Authorization: \"Bearer \" + msg.payload,\n    \"Content-Type\": \"application/json\",\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36\",\n    \"Connection\": \"keep-alive\",\n    \"Accept\": \"*/*\",\n    \"Cache-Control\": \"no-cache\",\n    \"Origin\": \"https://sunsynk.net\",\n    \"Referrer\": \"https://sunsynk.net\"\n}\nmsg.payload=\"\"\nmsg.url = \"http://pv.inteless.com/api/v1/inverters?page=1&limit=10&total=0&status=-1&sn=&plantId=&type=-2&softVer=&hmiVer=&agentCompanyId=-1&gsn=\";\n// http://pv.inteless.com/api/v1/inverters?page=1&limit=10&total=0&status=-1&sn=&plantId=&type=-2&softVer=&hmiVer=&agentCompanyId=-1&gsn=\nnode.status(msg.payload);\nlet currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString());\nif (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 300,
        "wires": [
            [
                "53ea109abab17477"
            ]
        ]
    },
    {
        "id": "e53175753e61992a",
        "type": "function",
        "z": "fca77f132c7d5d8f",
        "name": "Invertor Serial Number ( 1st Invertor )",
        "func": "if (typeof msg.payload === 'object') { } else {\n    if (msg.payload.includes(\"RequestError\")) {\n        node.status(\"Request Error\");\n    } else {\n        node.status(\"Unknown Error\");\n    }\n    node.error(msg.payload);\n    return null;\n}\n\nvar origpayload = msg.payload;\n\nif (origpayload.msg == \"Success\") {\n    msg.payload = msg.payload.data.infos[0].sn;\n    let currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString());\n    if (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\n    return msg\n} else {\n    msg.payload = {};\n    node.status(origpayload.msg)\n    node.error({ state: origpayload.msg, data: origpayload });\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 300,
        "wires": [
            [
                "99abf055fd0ac01e",
                "3014f46216bcf438"
            ]
        ]
    },
    {
        "id": "f51f0fbe061d9cd7",
        "type": "function",
        "z": "fca77f132c7d5d8f",
        "name": "Create Request for Getting battery Info",
        "func": "var states = global.get('homeassistant.homeAssistant.states');\nvar bearer = states[\"sensor.sunsynk_access_token\"];\nvar sn = states[\"sensor.sunsynk_serial_number\"];\n\n//error checking\nif ([undefined, \"unavailable\"].includes(bearer)) { node.status(\"Undefined\"); return null }\nif ([undefined, \"unavailable\"].includes(sn)) { node.status(\"Undefined\"); return null }\n\nmsg.headers = {\n    Authorization: \"Bearer \" + bearer.state,\n    \"Content-Type\": \"application/json\",\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36\",\n    \"Connection\": \"keep-alive\",\n    \"Accept\": \"*/*\",\n    \"Cache-Control\": \"no-cache\",\n    \"Origin\": \"https://sunsynk.net\",\n    \"Referrer\": \"https://sunsynk.net\"\n}\nmsg.url = \"http://pv.inteless.com/api/v1/inverter/battery/\" + sn.state + \"/realtime?sn=\" + sn.state + \"&lan\";\nmsg.payload=\"\";\nlet currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString());\nif (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 640,
        "wires": [
            [
                "e522b35a8a127bb6"
            ]
        ]
    },
    {
        "id": "e522b35a8a127bb6",
        "type": "http request",
        "z": "fca77f132c7d5d8f",
        "name": "Get Invertor Battery Info",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 930,
        "y": 640,
        "wires": [
            [
                "84cc88872dfbd9bb"
            ]
        ]
    },
    {
        "id": "8840cdead8881df7",
        "type": "function",
        "z": "fca77f132c7d5d8f",
        "name": "Create Request for Getting Invertor Settings",
        "func": "var states = global.get('homeassistant.homeAssistant.states');\nvar bearer = states[\"sensor.sunsynk_access_token\"];\nvar sn = states[\"sensor.sunsynk_serial_number\"];\n\n//error checking\nif ([undefined, \"unavailable\"].includes(bearer)) { node.status(\"Undefined\"); return null }\nif ([undefined, \"unavailable\"].includes(sn)) { node.status(\"Undefined\"); return null }\n\nmsg.headers = {\n    Authorization: \"Bearer \" + bearer.state,\n    \"Content-Type\": \"application/json\",\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36\",\n    \"Connection\": \"keep-alive\",\n    \"Accept\": \"*/*\",\n    \"Cache-Control\": \"no-cache\",\n    \"Origin\": \"https://sunsynk.net\",\n    \"Referrer\": \"https://sunsynk.net\"\n}\nmsg.url = \"http://pv.inteless.com/api/v1/common/setting/\" + sn.state + \"/read\";\nmsg.payload=\"\"\nlet currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString());\nif (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 880,
        "wires": [
            [
                "1c1aed6a936a4fc2"
            ]
        ]
    },
    {
        "id": "1c1aed6a936a4fc2",
        "type": "http request",
        "z": "fca77f132c7d5d8f",
        "name": "Get Invertor Settings",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 920,
        "y": 880,
        "wires": [
            [
                "a07a57f4173a145d"
            ]
        ]
    },
    {
        "id": "5cbff0fad88c676e",
        "type": "function",
        "z": "fca77f132c7d5d8f",
        "name": "Create Request for Getting Grid Info",
        "func": "var states = global.get('homeassistant.homeAssistant.states');\nvar bearer = states[\"sensor.sunsynk_access_token\"];\nvar sn = states[\"sensor.sunsynk_serial_number\"];\n\n//error checking\nif ([undefined, \"unavailable\"].includes(bearer)) { node.status(\"Undefined\"); return null }\nif ([undefined, \"unavailable\"].includes(sn)) { node.status(\"Undefined\"); return null }\n\nmsg.headers = {\n    Authorization: \"Bearer \" + bearer.state,\n    \"Content-Type\": \"application/json\",\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36\",\n    \"Connection\": \"keep-alive\",\n    \"Accept\": \"*/*\",\n    \"Cache-Control\": \"no-cache\",\n    \"Origin\": \"https://sunsynk.net\",\n    \"Referrer\": \"https://sunsynk.net\"\n}\nmsg.url = \"http://pv.inteless.com/api/v1/inverter/grid/\" + sn.state + \"/realtime?sn=\" + sn.state ;\nmsg.payload=\"\";\nlet currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString());\nif (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 760,
        "wires": [
            [
                "0dbcf760fe6ec990"
            ]
        ]
    },
    {
        "id": "0dbcf760fe6ec990",
        "type": "http request",
        "z": "fca77f132c7d5d8f",
        "name": "Get Invertor Grid Info",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 920,
        "y": 760,
        "wires": [
            [
                "82600efe878fe587"
            ]
        ]
    },
    {
        "id": "d985fcb00600c3b9",
        "type": "function",
        "z": "fca77f132c7d5d8f",
        "name": "Create Request for Getting Load Info",
        "func": "var states = global.get('homeassistant.homeAssistant.states');\nvar bearer = states[\"sensor.sunsynk_access_token\"];\nvar sn = states[\"sensor.sunsynk_serial_number\"];\n\n//error checking\nif ([undefined, \"unavailable\"].includes(bearer)) { node.status(\"Undefined\"); return null }\nif ([undefined, \"unavailable\"].includes(sn)) { node.status(\"Undefined\"); return null }\n\nmsg.headers = {\n    Authorization: \"Bearer \" + bearer.state,\n    \"Content-Type\": \"application/json\",\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36\",\n    \"Connection\": \"keep-alive\",\n    \"Accept\": \"*/*\",\n    \"Cache-Control\": \"no-cache\",\n    \"Origin\": \"https://sunsynk.net\",\n    \"Referrer\": \"https://sunsynk.net\"\n}\nmsg.url = \"http://pv.inteless.com/api/v1/inverter/load/\" + sn.state + \"/realtime?sn=\" + sn.state ;\nmsg.payload=\"\";\nlet currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString());\nif (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 820,
        "wires": [
            [
                "cd1e22edbc0da295"
            ]
        ]
    },
    {
        "id": "cd1e22edbc0da295",
        "type": "http request",
        "z": "fca77f132c7d5d8f",
        "name": "Get Invertor Load Info",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 920,
        "y": 820,
        "wires": [
            [
                "70ec719d14f92732"
            ]
        ]
    },
    {
        "id": "db5cc86a829e8bca",
        "type": "function",
        "z": "fca77f132c7d5d8f",
        "name": "Create Request for Getting Input",
        "func": "var states = global.get('homeassistant.homeAssistant.states');\nvar bearer = states[\"sensor.sunsynk_access_token\"];\nvar sn = states[\"sensor.sunsynk_serial_number\"];\n\n//error checking\nif ([undefined, \"unavailable\"].includes(bearer)) { node.status(\"Undefined\"); return null }\nif ([undefined, \"unavailable\"].includes(sn)) { node.status(\"Undefined\"); return null }\n\nmsg.headers = {\n    Authorization: \"Bearer \" + bearer.state,\n    \"Content-Type\": \"application/json\",\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36\",\n    \"Connection\": \"keep-alive\",\n    \"Accept\": \"*/*\",\n    \"Cache-Control\": \"no-cache\",\n    \"Origin\": \"https://sunsynk.net\",\n    \"Referrer\": \"https://sunsynk.net\"\n}\nmsg.url = \"http://pv.inteless.com/api/v1/inverter/\" + sn.state + \"/realtime/input\";\nmsg.payload=\"\";\nlet currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString());\nif (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 700,
        "wires": [
            [
                "caf5b68ee44cdaca"
            ]
        ]
    },
    {
        "id": "caf5b68ee44cdaca",
        "type": "http request",
        "z": "fca77f132c7d5d8f",
        "name": "Get Invertor Input",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 910,
        "y": 700,
        "wires": [
            [
                "095649a2b02e4ec2"
            ]
        ]
    },
    {
        "id": "ad31dd1db4441737",
        "type": "function",
        "z": "fca77f132c7d5d8f",
        "name": "Create Request for Getting Output",
        "func": "var states = global.get('homeassistant.homeAssistant.states');\nvar bearer = states[\"sensor.sunsynk_access_token\"];\nvar sn = states[\"sensor.sunsynk_serial_number\"];\n\n//error checking\nif ([undefined, \"unavailable\"].includes(bearer)) { node.status(\"Undefined\"); return null }\nif ([undefined, \"unavailable\"].includes(sn)) { node.status(\"Undefined\"); return null }\n\nmsg.headers = {\n    Authorization: \"Bearer \" + bearer.state,\n    \"Content-Type\": \"application/json\",\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36\",\n    \"Connection\": \"keep-alive\",\n    \"Accept\": \"*/*\",\n    \"Cache-Control\": \"no-cache\",\n    \"Origin\": \"https://sunsynk.net\",\n    \"Referrer\": \"https://sunsynk.net\"\n}\nmsg.url = \"http://pv.inteless.com/api/v1/inverter/\" + sn.state + \"/realtime/output\";\nmsg.payload=\"\";\nlet currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString());\nif (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 580,
        "wires": [
            [
                "45d5eef4e801a974"
            ]
        ]
    },
    {
        "id": "45d5eef4e801a974",
        "type": "http request",
        "z": "fca77f132c7d5d8f",
        "name": "Get Invertor Output",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 910,
        "y": 580,
        "wires": [
            [
                "70e66830d0ab0b90"
            ]
        ]
    },
    {
        "id": "a07a57f4173a145d",
        "type": "function",
        "z": "fca77f132c7d5d8f",
        "name": "Invert Settings",
        "func": "if (typeof msg.payload === 'object') { } else {\n    if (msg.payload.includes(\"RequestError\")) {\n        node.status(\"Request Error\");\n    } else {\n        node.status(\"Unknown Error\");\n    }\n    node.error(msg.payload);\n    return null;\n}\n\nvar returnvalue = {};\n\nfunction scroll_all_items(s_payload, t_tkey) {\n    Object.entries(s_payload).forEach((entry) => {\n        const [key, value] = entry;\n        if (value === null || value === \"\") {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = \"Missing\"; }\n        } else if (s_payload[key].length === 0) {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        } else if (typeof s_payload[key] === 'object') {\n            if (Array.isArray(s_payload[key])) {\n                if (t_tkey === \"\") { process_array(s_payload[key], key); } else { process_array(s_payload[key], t_tkey + \"_\" + key); }\n            } else {\n                if (t_tkey === \"\") { scroll_all_items(s_payload[key], key); } else { scroll_all_items(s_payload[key], t_tkey + \"_\" + key); }\n            }\n        } else {\n            if (t_tkey === \"\") { returnvalue[key] = value; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        }\n    });\n    return;\n}\n\nfunction process_array(s_payload, t_tkey) {\n    if (t_tkey === \"infos_0_plantPermission\") { returnvalue[t_tkey] = \"Not Processed\" }\n    else {\n        for (let i = 0; i < s_payload.length; i++) {\n            scroll_all_items(s_payload[i], t_tkey + \"_\" + i);\n        }\n    }\n    return;\n}\n\n\nvar origpayload = msg.payload;\nif (origpayload.msg == \"Success\") {\n    msg.payload.attributes = {};\n    scroll_all_items(msg.payload.data, \"\");\n    msg.payload.attributes = returnvalue;\n    msg.payload.state = \"Success\";\n    let currdate = new Date(); node.status(origpayload.msg + \" - \" + currdate.toLocaleString());\n    if (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\n    return msg;\n} else {\n    msg.payload = {};\n    node.status(origpayload.msg)\n    node.error({ state: origpayload.msg, data: origpayload });\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 880,
        "wires": [
            [
                "127a0b93cf41d353"
            ]
        ]
    },
    {
        "id": "21dae3e15cef46c9",
        "type": "function",
        "z": "fca77f132c7d5d8f",
        "name": "Create Request for Getting Plant Info",
        "func": "var states = global.get('homeassistant.homeAssistant.states');\nvar bearer = states[\"sensor.sunsynk_access_token\"];\n//error checking\nif ([undefined, \"unavailable\"].includes(bearer)) { node.status(\"Undefined\"); return null }\n\nmsg.headers = {\n    Authorization: \"Bearer \" + bearer.state,\n    \"Content-Type\": \"application/json\",\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36\",\n    \"Connection\": \"keep-alive\",\n    \"Accept\": \"*/*\",\n    \"Cache-Control\": \"no-cache\",\n    \"Origin\": \"https://sunsynk.net\",\n    \"Referrer\": \"https://sunsynk.net\"\n}\nmsg.url = \"https://pv.inteless.com/api/v1/plants?page=1&limit=10&name=&status=\";\nmsg.payload=\"\"\nlet currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString());\nif (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 460,
        "wires": [
            [
                "a5e32263433166d3"
            ]
        ]
    },
    {
        "id": "a5e32263433166d3",
        "type": "http request",
        "z": "fca77f132c7d5d8f",
        "name": "Get Plant List",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 860,
        "y": 460,
        "wires": [
            [
                "6df5b52d7b770df4",
                "cf949f3158a35e48"
            ]
        ]
    },
    {
        "id": "6df5b52d7b770df4",
        "type": "function",
        "z": "fca77f132c7d5d8f",
        "name": "Plant ID No",
        "func": "if (typeof msg.payload === 'object') { } else {\n    if (msg.payload.includes(\"RequestError\")) {\n        node.status(\"Request Error\");\n    } else {\n        node.status(\"Unknown Error\");\n    }\n    node.error(msg.payload);\n    return null;\n}\n\nvar origpayload = msg.payload;\nif (origpayload.msg == \"Success\") {\n    msg.payload = msg.payload.data.infos[0].id;\n    node.status(\"Success\")\n    if (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\n    return msg\n} else {\n    msg.payload = {};\n    node.status(origpayload.msg)\n    node.error({ state: origpayload.msg, data: origpayload });\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 460,
        "wires": [
            [
                "ec3ce6ac52b04130",
                "90cdfc715504431c"
            ]
        ]
    },
    {
        "id": "90cdfc715504431c",
        "type": "function",
        "z": "fca77f132c7d5d8f",
        "name": "Get Plant Flow Data",
        "func": "var states = global.get('homeassistant.homeAssistant.states');\nvar bearer = states[\"sensor.sunsynk_access_token\"];\nvar plant = states[\"sensor.plant_id_no\"];\n\n//error checking\nif ([undefined, \"unavailable\"].includes(bearer)) { node.status(\"Undefined\"); return null }\nif ([undefined, \"unavailable\"].includes(plant)) { node.status(\"Undefined\"); return null }\n\nmsg.headers = {\n    Authorization: \"Bearer \" + bearer.state,\n    \"Content-Type\": \"application/json\",\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36\",\n    \"Connection\": \"keep-alive\",\n    \"Accept\": \"*/*\",\n    \"Cache-Control\": \"no-cache\",\n    \"Origin\": \"https://sunsynk.net\",\n    \"Referrer\": \"https://sunsynk.net\"\n}\nmsg.url = \"http://pv.inteless.com/api/v1/plant/energy/\" + plant.state + \"/flow\";\nmsg.payload=\"\"\nlet currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString());\nif (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 520,
        "wires": [
            [
                "d39e0694ad913862"
            ]
        ]
    },
    {
        "id": "d39e0694ad913862",
        "type": "http request",
        "z": "fca77f132c7d5d8f",
        "name": "Get Flow Data",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 900,
        "y": 520,
        "wires": [
            [
                "6360d898e9fec6b9"
            ]
        ]
    },
    {
        "id": "84cc88872dfbd9bb",
        "type": "function",
        "z": "fca77f132c7d5d8f",
        "name": "Sunsynk Battery Data",
        "func": "if (typeof msg.payload === 'object') { } else {\n    if (msg.payload.includes(\"RequestError\")) {\n        node.status(\"Request Error\");\n    } else {\n        node.status(\"Unknown Error\");\n    }\n    node.error(msg.payload);\n    return null;\n}\n\nvar returnvalue = {};\n\nfunction scroll_all_items(s_payload, t_tkey) {\n    Object.entries(s_payload).forEach((entry) => {\n        const [key, value] = entry;\n        if (value === null || value === \"\") {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = \"Missing\"; }\n        } else if (s_payload[key].length === 0) {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        } else if (typeof s_payload[key] === 'object') {\n            if (Array.isArray(s_payload[key])) {\n                if (t_tkey === \"\") { process_array(s_payload[key], key); } else { process_array(s_payload[key], t_tkey + \"_\" + key); }\n            } else {\n                if (t_tkey === \"\") { scroll_all_items(s_payload[key], key); } else { scroll_all_items(s_payload[key], t_tkey + \"_\" + key); }\n            }\n        } else {\n            if (t_tkey === \"\") { returnvalue[key] = value; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        }\n    });\n    return;\n}\n\nfunction process_array(s_payload, t_tkey) {\n    if (t_tkey === \"infos_0_plantPermission\") { returnvalue[t_tkey] = \"Not Processed\" }\n    else {\n        for (let i = 0; i < s_payload.length; i++) {\n            scroll_all_items(s_payload[i], t_tkey + \"_\" + i);\n        }\n    }\n    return;\n}\n\n\nvar origpayload = msg.payload;\nif (origpayload.msg == \"Success\") {\n    msg.payload.attributes = {};\n    scroll_all_items(msg.payload.data, \"\");\n    msg.payload.attributes = returnvalue;\n    msg.payload.state = parseFloat(msg.payload.data.soc);\n    let currdate = new Date(); node.status(origpayload.msg + \" - \" + currdate.toLocaleString());\n    msg.payload.attributes.soc = parseFloat(msg.payload.data.soc);\n    msg.payload.attributes.capacity = parseFloat(msg.payload.data.capacity);\n    msg.payload.attributes.correctcapacity = parseFloat(msg.payload.data.correctCap);\n    msg.payload.attributes.power = parseFloat(msg.payload.data.power);\n    msg.payload.attributes.etotalchg = parseFloat(msg.payload.data.etotalChg);\n    msg.payload.attributes.etotaldischg = parseFloat(msg.payload.data.etotalDischg);\n    msg.payload.attributes.temp = parseFloat(msg.payload.data.temp);\n    msg.payload.attributes.current = parseFloat(msg.payload.data.current);\n    msg.payload.attributes.voltage = parseFloat(msg.payload.data.voltage);\n    msg.payload.attributes.status = parseFloat(msg.payload.data.status);    \n    if (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\n    return msg;\n} else {\n    msg.payload = {};\n    node.status(origpayload.msg)\n    node.error({ state: origpayload.msg, data: origpayload });\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 640,
        "wires": [
            [
                "3e9feb5ff04bc328"
            ]
        ]
    },
    {
        "id": "095649a2b02e4ec2",
        "type": "function",
        "z": "fca77f132c7d5d8f",
        "name": "Sunsynk Input Data",
        "func": "if (typeof msg.payload === 'object') { } else {\n    if (msg.payload.includes(\"RequestError\")) {\n        node.status(\"Request Error\");\n    } else {\n        node.status(\"Unknown Error\");\n    }\n    node.error(msg.payload);\n    return null;\n}\n\nvar returnvalue = {};\n\nfunction scroll_all_items(s_payload, t_tkey) {\n    Object.entries(s_payload).forEach((entry) => {\n        const [key, value] = entry;\n        if (value === null || value === \"\") {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = \"Missing\"; }\n        } else if (s_payload[key].length === 0) {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        } else if (typeof s_payload[key] === 'object') {\n            if (Array.isArray(s_payload[key])) {\n                if (t_tkey === \"\") { process_array(s_payload[key], key); } else { process_array(s_payload[key], t_tkey + \"_\" + key); }\n            } else {\n                if (t_tkey === \"\") { scroll_all_items(s_payload[key], key); } else { scroll_all_items(s_payload[key], t_tkey + \"_\" + key); }\n            }\n        } else {\n            if (t_tkey === \"\") { returnvalue[key] = value; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        }\n    });\n    return;\n}\n\nfunction process_array(s_payload, t_tkey) {\n    if (t_tkey === \"infos_0_plantPermission\") { returnvalue[t_tkey] = \"Not Processed\" }\n    else {\n        for (let i = 0; i < s_payload.length; i++) {\n            scroll_all_items(s_payload[i], t_tkey + \"_\" + i);\n        }\n    }\n    return;\n}\n\n\nvar origpayload = msg.payload;\nif (origpayload.msg == \"Success\") {\n    msg.payload.attributes = {};\n    scroll_all_items(msg.payload.data, \"\");\n    msg.payload.attributes = returnvalue;\n    msg.payload.state = parseFloat(msg.payload.data.pvIV[0].ppv) + parseFloat(msg.payload.data.pvIV[1].ppv);\n    let currdate = new Date(); node.status(origpayload.msg + \" - \" + currdate.toLocaleString());\n    msg.payload.attributes.pv = parseFloat(msg.payload.data.pvIV[0].ppv) + parseFloat(msg.payload.data.pvIV[1].ppv);\n    msg.payload.attributes.pv1 = parseFloat(msg.payload.data.pvIV[0].ppv) ;\n    msg.payload.attributes.pv1_volt = parseFloat(msg.payload.data.pvIV[0].vpv);\n    msg.payload.attributes.pv1_current = parseFloat(msg.payload.data.pvIV[0].ipv);\n    msg.payload.attributes.pv2 = parseFloat(msg.payload.data.pvIV[1].ppv);\n    msg.payload.attributes.pv2_volt = parseFloat(msg.payload.data.pvIV[1].vpv);\n    msg.payload.attributes.pv2_current = parseFloat(msg.payload.data.pvIV[1].ipv);\n    msg.payload.attributes.pvtotal = parseFloat(msg.payload.data.etotal);\n    if (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\n    return msg;\n} else {\n    msg.payload = {};\n    node.status(origpayload.msg)\n    node.error({ state: origpayload.msg, data: origpayload });\n    return null;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 700,
        "wires": [
            [
                "9cb3e2a71092678d"
            ]
        ]
    },
    {
        "id": "82600efe878fe587",
        "type": "function",
        "z": "fca77f132c7d5d8f",
        "name": "Sunsynk Grid",
        "func": "if (typeof msg.payload === 'object') { } else {\n    if (msg.payload.includes(\"RequestError\")) {\n        node.status(\"Request Error\");\n    } else {\n        node.status(\"Unknown Error\");\n    }\n    node.error(msg.payload);\n    return null;\n}\n\nvar returnvalue = {};\n\nfunction scroll_all_items(s_payload, t_tkey) {\n    Object.entries(s_payload).forEach((entry) => {\n        const [key, value] = entry;\n        if (value === null || value === \"\") {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = \"Missing\"; }\n        } else if (s_payload[key].length === 0) {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        } else if (typeof s_payload[key] === 'object') {\n            if (Array.isArray(s_payload[key])) {\n                if (t_tkey === \"\") { process_array(s_payload[key], key); } else { process_array(s_payload[key], t_tkey + \"_\" + key); }\n            } else {\n                if (t_tkey === \"\") { scroll_all_items(s_payload[key], key); } else { scroll_all_items(s_payload[key], t_tkey + \"_\" + key); }\n            }\n        } else {\n            if (t_tkey === \"\") { returnvalue[key] = value; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        }\n    });\n    return;\n}\n\nfunction process_array(s_payload, t_tkey) {\n    if (t_tkey === \"infos_0_plantPermission\") { returnvalue[t_tkey] = \"Not Processed\" }\n    else {\n        for (let i = 0; i < s_payload.length; i++) {\n            scroll_all_items(s_payload[i], t_tkey + \"_\" + i);\n        }\n    }\n    return;\n}\n\n\nvar origpayload = msg.payload;\nif (origpayload.msg == \"Success\") {\n    msg.payload.attributes = {};\n    scroll_all_items(msg.payload.data, \"\");\n    msg.payload.attributes = returnvalue;\n    msg.payload.state = msg.payload.data.vip[0].current;\n    let currdate = new Date(); node.status(origpayload.msg + \" - \" + currdate.toLocaleString());\n    msg.payload.attributes.total = parseFloat(msg.payload.data.etotalFrom);\n    msg.payload.attributes.volt = msg.payload.data.vip[0].volt;\n    msg.payload.attributes.current = msg.payload.data.vip[0].current;\n    var gridonline = false;\n    if (parseFloat(msg.payload.data.vip[0].volt) < 200) { var gridonline = false } else { var gridonline = true }\n    msg.payload.attributes.gridonline = gridonline ;\n    msg.payload.attributes.power = parseFloat(msg.payload.data.vip[0].power);\n    if (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\n    return msg;\n} else {\n    msg.payload = {};\n    node.status(origpayload.msg)\n    node.error({ state: origpayload.msg, data: origpayload });\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 760,
        "wires": [
            [
                "2eb2b3cada070416"
            ]
        ]
    },
    {
        "id": "70ec719d14f92732",
        "type": "function",
        "z": "fca77f132c7d5d8f",
        "name": "Sunsynk Load",
        "func": "if (typeof msg.payload === 'object') { } else {\n    if (msg.payload.includes(\"RequestError\")) {\n        node.status(\"Request Error\");\n    } else {\n        node.status(\"Unknown Error\");\n    }\n    node.error(msg.payload);\n    return null;\n}\n\nvar returnvalue = {};\n\nfunction scroll_all_items(s_payload, t_tkey) {\n    Object.entries(s_payload).forEach((entry) => {\n        const [key, value] = entry;\n        if (value === null || value === \"\") {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = \"Missing\"; }\n        } else if (s_payload[key].length === 0) {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        } else if (typeof s_payload[key] === 'object') {\n            if (Array.isArray(s_payload[key])) {\n                if (t_tkey === \"\") { process_array(s_payload[key], key); } else { process_array(s_payload[key], t_tkey + \"_\" + key); }\n            } else {\n                if (t_tkey === \"\") { scroll_all_items(s_payload[key], key); } else { scroll_all_items(s_payload[key], t_tkey + \"_\" + key); }\n            }\n        } else {\n            if (t_tkey === \"\") { returnvalue[key] = value; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        }\n    });\n    return;\n}\n\nfunction process_array(s_payload, t_tkey) {\n    if (t_tkey === \"infos_0_plantPermission\") { returnvalue[t_tkey] = \"Not Processed\" }\n    else {\n        for (let i = 0; i < s_payload.length; i++) {\n            scroll_all_items(s_payload[i], t_tkey + \"_\" + i);\n        }\n    }\n    return;\n}\n\n\nvar origpayload = msg.payload;\nif (origpayload.msg == \"Success\") {\n    msg.payload.attributes = {};\n    scroll_all_items(msg.payload.data, \"\");\n    msg.payload.attributes = returnvalue;\n    msg.payload.state = msg.payload.data.vip[0].power;\n    let currdate = new Date(); node.status(origpayload.msg + \" - \" + currdate.toLocaleString());\n    msg.payload.attributes.total = parseFloat(msg.payload.data.totalUsed);\n    msg.payload.attributes.volt = msg.payload.data.vip[0].volt;\n    msg.payload.attributes.power = msg.payload.data.vip[0].power;\n    msg.payload.attributes.totalpower = msg.payload.data.totalPower;\n    var tempcurrent = parseFloat(msg.payload.attributes.power) / parseFloat(msg.payload.attributes.volt);\n    msg.payload.attributes.calc_current = tempcurrent.toFixed(2);\n    if (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\n    return msg ;\n} else {\n    msg.payload = {};\n    node.status(origpayload.msg)\n    node.error({ state: origpayload.msg, data: origpayload });\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 820,
        "wires": [
            [
                "31dd21860cbc8c4c"
            ]
        ]
    },
    {
        "id": "70e66830d0ab0b90",
        "type": "function",
        "z": "fca77f132c7d5d8f",
        "name": "Sunsynk Invertor Output",
        "func": "if (typeof msg.payload === 'object') { } else {\n    if (msg.payload.includes(\"RequestError\")) {\n        node.status(\"Request Error\");\n    } else {\n        node.status(\"Unknown Error\");\n    }\n    node.error(msg.payload);\n    return null;\n}\n\nvar returnvalue = {};\n\nfunction scroll_all_items(s_payload, t_tkey) {\n    Object.entries(s_payload).forEach((entry) => {\n        const [key, value] = entry;\n        if (value === null || value === \"\") {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = \"Missing\"; }\n        } else if (s_payload[key].length === 0) {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        } else if (typeof s_payload[key] === 'object') {\n            if (Array.isArray(s_payload[key])) {\n                if (t_tkey === \"\") { process_array(s_payload[key], key); } else { process_array(s_payload[key], t_tkey + \"_\" + key); }\n            } else {\n                if (t_tkey === \"\") { scroll_all_items(s_payload[key], key); } else { scroll_all_items(s_payload[key], t_tkey + \"_\" + key); }\n            }\n        } else {\n            if (t_tkey === \"\") { returnvalue[key] = value; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        }\n    });\n    return;\n}\n\nfunction process_array(s_payload, t_tkey) {\n    if (t_tkey === \"infos_0_plantPermission\") { returnvalue[t_tkey] = \"Not Processed\" }\n    else {\n        for (let i = 0; i < s_payload.length; i++) {\n            scroll_all_items(s_payload[i], t_tkey + \"_\" + i);\n        }\n    }\n    return;\n}\n\n\nvar origpayload = msg.payload;\nif (origpayload.msg == \"Success\") {\n    msg.payload.attributes = {};\n    scroll_all_items(msg.payload.data, \"\");\n    msg.payload.attributes = returnvalue;\n    msg.payload.state = \"Success\";\n    let currdate = new Date(); node.status(origpayload.msg + \" - \" + currdate.toLocaleString());\n    if (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\n    return msg ;\n} else {\n    msg.payload = {};\n    node.status(origpayload.msg)\n    node.error({ state: origpayload.msg, data: origpayload });\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 580,
        "wires": [
            [
                "c4c01331b7a03f18"
            ]
        ]
    },
    {
        "id": "6360d898e9fec6b9",
        "type": "function",
        "z": "fca77f132c7d5d8f",
        "name": "Plant Flow Data",
        "func": "if (typeof msg.payload === 'object') { } else {\n    if (msg.payload.includes(\"RequestError\")) {\n        node.status(\"Request Error\");\n    } else {\n        node.status(\"Unknown Error\");\n    }\n    node.error(msg.payload);\n    return null;\n}\n\nvar returnvalue = {};\n\nfunction scroll_all_items(s_payload, t_tkey) {\n    Object.entries(s_payload).forEach((entry) => {\n        const [key, value] = entry;\n        if (value === null || value === \"\") {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = \"Missing\"; }\n        } else if (s_payload[key].length === 0) {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        } else if (typeof s_payload[key] === 'object') {\n            if (Array.isArray(s_payload[key])) {\n                if (t_tkey === \"\") { process_array(s_payload[key], key); } else { process_array(s_payload[key], t_tkey + \"_\" + key); }\n            } else {\n                if (t_tkey === \"\") { scroll_all_items(s_payload[key], key); } else { scroll_all_items(s_payload[key], t_tkey + \"_\" + key); }\n            }\n        } else {\n            if (t_tkey === \"\") { returnvalue[key] = value; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        }\n    });\n    return;\n}\n\nfunction process_array(s_payload, t_tkey) {\n    if (t_tkey === \"infos_0_plantPermission\") { returnvalue[t_tkey] = \"Not Processed\" }\n    else {\n        for (let i = 0; i < s_payload.length; i++) {\n            scroll_all_items(s_payload[i], t_tkey + \"_\" + i);\n        }\n    }\n    return;\n}\n\n\nvar origpayload = msg.payload;\nif (origpayload.msg == \"Success\") {\n    msg.payload.attributes = {};\n    scroll_all_items(msg.payload.data, \"\");\n    msg.payload.attributes = returnvalue;\n    msg.payload.state = \"Success\";\n    let currdate = new Date(); node.status(origpayload.msg + \" - \" + currdate.toLocaleString());\n    if (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\n    return msg;\n} else {\n    msg.payload = {};\n    node.status(origpayload.msg)\n    node.error({ state: origpayload.msg, data: origpayload });\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 520,
        "wires": [
            [
                "54907525a327c8f1"
            ]
        ]
    },
    {
        "id": "90673d2b7f54dc55",
        "type": "function",
        "z": "fca77f132c7d5d8f",
        "name": "Sunsynk Invertor List",
        "func": "if (typeof msg.payload === 'object') { } else {\n    if (msg.payload.includes(\"RequestError\")) {\n        node.status(\"Request Error\");\n    } else {\n        node.status(\"Unknown Error\");\n    }\n    node.error(msg.payload);\n    return null;\n}\nvar returnvalue = {};\n\nfunction scroll_all_items(s_payload, t_tkey) {\n    Object.entries(s_payload).forEach((entry) => {\n        const [key, value] = entry;\n        if (value === null || value === \"\") {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = \"Missing\"; }\n        } else if (s_payload[key].length === 0) {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        } else if (typeof s_payload[key] === 'object') {\n            if (Array.isArray(s_payload[key])) {\n                if (t_tkey === \"\") { process_array(s_payload[key], key); } else { process_array(s_payload[key], t_tkey + \"_\" + key); }\n            } else {\n                if (t_tkey === \"\") { scroll_all_items(s_payload[key], key); } else { scroll_all_items(s_payload[key], t_tkey + \"_\" + key); }\n            }\n        } else {\n            if (t_tkey === \"\") { returnvalue[key] = value; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        }\n    });\n    return;\n}\n\nfunction process_array(s_payload, t_tkey) {\n    if (t_tkey === \"infos_0_plantPermission\") { returnvalue[t_tkey] = \"Not Processed\" }\n    else {\n        for (let i = 0; i < s_payload.length; i++) {\n            scroll_all_items(s_payload[i], t_tkey + \"_\" + i);\n        }\n    }\n    return;\n}\n\n\nvar origpayload = msg.payload;\nif (origpayload.msg == \"Success\") {\n    msg.payload = {};\n    msg.payload.attributes = {};\n    scroll_all_items(origpayload.data, \"\");\n    msg.payload.attributes = returnvalue;\n    msg.payload.state = origpayload.msg;\n    node.status(origpayload.msg)\n    if (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\n    return msg\n} else {\n    msg.payload = {};\n    node.status(origpayload.msg)\n    node.error({ state: origpayload.msg, data: origpayload });\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 240,
        "wires": [
            [
                "c9592b52b355aebe"
            ]
        ]
    },
    {
        "id": "cf949f3158a35e48",
        "type": "function",
        "z": "fca77f132c7d5d8f",
        "name": "Sunsynk Plant List",
        "func": "if (typeof msg.payload === 'object') { } else {\n    if (msg.payload.includes(\"RequestError\")) {\n        node.status(\"Request Error\");\n    } else {\n        node.status(\"Unknown Error\");\n    }\n    node.error(msg.payload);\n    return null;\n}\n\nvar returnvalue = {};\n\nfunction scroll_all_items(s_payload, t_tkey) {\n    Object.entries(s_payload).forEach((entry) => {\n        const [key, value] = entry;\n        if (value === null || value === \"\") {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = \"Missing\"; }\n        } else if (s_payload[key].length === 0) {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        } else if (typeof s_payload[key] === 'object') {\n            if (Array.isArray(s_payload[key])) {\n                if (t_tkey === \"\") { process_array(s_payload[key], key); } else { process_array(s_payload[key], t_tkey + \"_\" + key); }\n            } else {\n                if (t_tkey === \"\") { scroll_all_items(s_payload[key], key); } else { scroll_all_items(s_payload[key], t_tkey + \"_\" + key); }\n            }\n        } else {\n            if (t_tkey === \"\") { returnvalue[key] = value; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        }\n    });\n    return;\n}\n\nfunction process_array(s_payload, t_tkey) {\n    if (t_tkey === \"infos_0_plantPermission\") { returnvalue[t_tkey] = \"Not Processed\" }\n    else {\n        for (let i = 0; i < s_payload.length; i++) {\n            scroll_all_items(s_payload[i], t_tkey + \"_\" + i);\n        }\n    }\n    return;\n}\n\n\nvar origpayload = msg.payload;\nif (origpayload.msg == \"Success\") {\n    msg.payload.attributes = {};\n    scroll_all_items(msg.payload.data, \"\");\n    node.status(origpayload.msg);\n    msg.payload.state = \"Success\";\n    msg.payload.attributes = returnvalue;\n    if (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\n    return msg\n} else {\n    msg.payload = {};\n    node.status(origpayload.msg)\n    node.error({ state: origpayload.msg, data: origpayload });\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 400,
        "wires": [
            [
                "539daee32f23a903"
            ]
        ]
    },
    {
        "id": "0c13157122cbbc47",
        "type": "function",
        "z": "fca77f132c7d5d8f",
        "name": "Create Request for Login",
        "func": "//  SET TO 1 TO ENABLE DEBUG MESSAGES \nvar sunsynkdebug=0;\n//\nvar states = global.get(\"homeassistant.homeAssistant.states\");\nvar login = states[\"sensor.sunsynk_login\"];\nvar password = states[\"sensor.sunsynk_password_new\"];\n\n//error checking\nif ([undefined, \"unavailable\"].includes(login)) { node.status(\"Undefined\"); return null }\nif ([undefined, \"unavailable\"].includes(password)) { node.status(\"Undefined\"); return null }\nif (login === \"xxx@xxx.com\" ) { node.status(\"Edit state setting in template please for login\"); return null }\nif (password === \"xxx\") { node.status(\"Edit state setting in template please for password\"); return null }\n\nmsg.url = \"https://pv.inteless.com/oauth/token\";\nmsg.payload={};\nmsg.payload.username = login.state ;\n//msg.payload.username = \"test@test.com\" ;\nmsg.payload.password = password.state ;\nmsg.payload.grant_type = \"password\";\nmsg.payload.client_id = \"csp-web\";\n//set global debug flag \nglobal.set(\"SunSynkDebug\", sunsynkdebug)\nlet currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString());\nif (global.get(\"SunSynkDebug\") === 1 ) { node.error(msg); }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 160,
        "wires": [
            [
                "7c8b53ad04cf5062"
            ]
        ]
    },
    {
        "id": "02ed1830b409d282",
        "type": "inject",
        "z": "fca77f132c7d5d8f",
        "name": "Inject",
        "props": [],
        "repeat": "45",
        "crontab": "",
        "once": true,
        "onceDelay": "15",
        "topic": "",
        "x": 130,
        "y": 160,
        "wires": [
            [
                "0c13157122cbbc47",
                "a5e5f685a25108df"
            ]
        ]
    },
    {
        "id": "7c8b53ad04cf5062",
        "type": "http request",
        "z": "fca77f132c7d5d8f",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://pv.inteless.com/oauth/token",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 530,
        "y": 160,
        "wires": [
            [
                "8ca6ebb9883a33b8",
                "ca7f0e1c421c6e1c"
            ]
        ]
    },
    {
        "id": "8b0fcb8b287cc618",
        "type": "hass-post",
        "z": "fca77f132c7d5d8f",
        "endpoint": "bc1c0f273da7bbae",
        "entityid": "sensor.sunsynk_access_token",
        "name": "Update sensor.sunsynk_access_token",
        "x": 1470,
        "y": 100,
        "wires": []
    },
    {
        "id": "ca7f0e1c421c6e1c",
        "type": "function",
        "z": "fca77f132c7d5d8f",
        "name": "Save new Bearer",
        "func": "if (typeof msg.payload === 'object') { } else {\n    if (msg.payload.includes(\"RequestError\")) {\n        node.status(\"Request Error\");\n    } else {\n        node.status(\"Unknown Error\");\n    }\n    node.error(msg.payload);\n    return null;\n}\n\nvar origpayload = msg.payload;\n\nif (origpayload.msg == \"Success\") \n{\n    msg.payload = {};\n    msg.payload.attributes = {};\n    msg.payload.state = origpayload.data.access_token;\n    msg.payload.attributes.lastsucccess = origpayload.msg ;\n    let currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString());\n    if (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\n    return msg\n} else {\n    msg.payload = {};\n    node.status(origpayload.msg)\n    node.error({ state: origpayload.msg, data: origpayload });\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 100,
        "wires": [
            [
                "8b0fcb8b287cc618"
            ]
        ]
    },
    {
        "id": "99abf055fd0ac01e",
        "type": "delay",
        "z": "fca77f132c7d5d8f",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "60",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 160,
        "y": 460,
        "wires": [
            [
                "8840cdead8881df7",
                "d985fcb00600c3b9",
                "5cbff0fad88c676e",
                "db5cc86a829e8bca",
                "f51f0fbe061d9cd7",
                "ad31dd1db4441737",
                "21dae3e15cef46c9",
                "88abea85be217c44",
                "de549111356c836d",
                "7ceb62668ca5b355"
            ]
        ]
    },
    {
        "id": "c9592b52b355aebe",
        "type": "hass-post",
        "z": "fca77f132c7d5d8f",
        "endpoint": "bc1c0f273da7bbae",
        "entityid": "sensor.sunsynk_invertor_list",
        "name": "Update sensor.sunsynk_invertor_list",
        "x": 1470,
        "y": 280,
        "wires": []
    },
    {
        "id": "a57a72a33e0f7629",
        "type": "hass-post",
        "z": "fca77f132c7d5d8f",
        "endpoint": "bc1c0f273da7bbae",
        "entityid": "sensor.plant_id_no",
        "name": "Update Plant ID",
        "x": 1400,
        "y": 460,
        "wires": []
    },
    {
        "id": "ec3ce6ac52b04130",
        "type": "function",
        "z": "fca77f132c7d5d8f",
        "name": "Save Plant ID",
        "func": "var origpayload = msg.payload;\nmsg.payload = {} ;\nmsg.payload.attributes = {};\nmsg.payload.state = origpayload;\nnode.status(msg.payload.state);\nif (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 460,
        "wires": [
            [
                "a57a72a33e0f7629"
            ]
        ]
    },
    {
        "id": "54907525a327c8f1",
        "type": "hass-post",
        "z": "fca77f132c7d5d8f",
        "endpoint": "bc1c0f273da7bbae",
        "entityid": "sensor.sunsynk_flow",
        "name": "Update SunSynk Flow",
        "x": 1420,
        "y": 520,
        "wires": []
    },
    {
        "id": "3e9feb5ff04bc328",
        "type": "hass-post",
        "z": "fca77f132c7d5d8f",
        "endpoint": "bc1c0f273da7bbae",
        "entityid": "sensor.sunsynk_battery",
        "name": "Update SunSynk Battery",
        "x": 1430,
        "y": 640,
        "wires": []
    },
    {
        "id": "c4c01331b7a03f18",
        "type": "hass-post",
        "z": "fca77f132c7d5d8f",
        "endpoint": "bc1c0f273da7bbae",
        "entityid": "sensor.sunsynk_output",
        "name": "Update SunSynk Output",
        "x": 1430,
        "y": 580,
        "wires": []
    },
    {
        "id": "9cb3e2a71092678d",
        "type": "hass-post",
        "z": "fca77f132c7d5d8f",
        "endpoint": "bc1c0f273da7bbae",
        "entityid": "sensor.sunsynk_input",
        "name": "Update SunSynk Input",
        "x": 1420,
        "y": 700,
        "wires": []
    },
    {
        "id": "2eb2b3cada070416",
        "type": "hass-post",
        "z": "fca77f132c7d5d8f",
        "endpoint": "bc1c0f273da7bbae",
        "entityid": "sensor.sunsynk_grid",
        "name": "Update SunSynk Grid",
        "x": 1420,
        "y": 760,
        "wires": []
    },
    {
        "id": "31dd21860cbc8c4c",
        "type": "hass-post",
        "z": "fca77f132c7d5d8f",
        "endpoint": "bc1c0f273da7bbae",
        "entityid": "sensor.sunsynk_load",
        "name": "Update SunSynk Load",
        "x": 1420,
        "y": 820,
        "wires": []
    },
    {
        "id": "127a0b93cf41d353",
        "type": "hass-post",
        "z": "fca77f132c7d5d8f",
        "endpoint": "bc1c0f273da7bbae",
        "entityid": "sensor.sunsynk_settings",
        "name": "Update SunSynk Settings",
        "x": 1430,
        "y": 880,
        "wires": []
    },
    {
        "id": "d8de0c3eeca8835a",
        "type": "hass-post",
        "z": "fca77f132c7d5d8f",
        "endpoint": "bc1c0f273da7bbae",
        "entityid": "sensor.sunsynk_serial_number",
        "name": "Update Serial Number",
        "x": 1420,
        "y": 340,
        "wires": []
    },
    {
        "id": "3014f46216bcf438",
        "type": "function",
        "z": "fca77f132c7d5d8f",
        "name": "Invertor Serial Number",
        "func": "var origpayload = msg.payload;\nmsg.payload = {} ;\nmsg.payload.state = origpayload ;\nlet currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString());\nif (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 300,
        "wires": [
            [
                "d8de0c3eeca8835a"
            ]
        ]
    },
    {
        "id": "539daee32f23a903",
        "type": "hass-post",
        "z": "fca77f132c7d5d8f",
        "endpoint": "bc1c0f273da7bbae",
        "entityid": "sensor.sunsynk_plant_list",
        "name": "Update Sunsynk Plant List",
        "x": 1440,
        "y": 400,
        "wires": []
    },
    {
        "id": "88abea85be217c44",
        "type": "function",
        "z": "fca77f132c7d5d8f",
        "name": "Create Request for Getting Events",
        "func": "var states = global.get('homeassistant.homeAssistant.states');\nvar bearer = states[\"sensor.sunsynk_access_token\"];\nvar sn = states[\"sensor.sunsynk_serial_number\"];\n\n//error checking\nif ([undefined, \"unavailable\"].includes(bearer)) { node.status(\"Undefined\"); return null }\nif ([undefined, \"unavailable\"].includes(sn)) { node.status(\"Undefined\"); return null }\n\nmsg.headers = {\n    Authorization: \"Bearer \" + bearer.state,\n    \"Content-Type\": \"application/json\",\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36\",\n    \"Connection\": \"keep-alive\",\n    \"Accept\": \"*/*\",\n    \"Cache-Control\": \"no-cache\",\n    \"Origin\": \"https://sunsynk.net\",\n    \"Referrer\": \"https://sunsynk.net\"\n}\nvar currentDate = (new Date().toJSON().slice(0, 10));\nvar fromdate = new Date();\nfromdate.setDate(fromdate.getDate() - 60);\nvar startdate = fromdate.toJSON().slice(0, 10);\nmsg.url = \"http://pv.inteless.com/api/v1/events\"\n    + \"?type=1&page=1&limit=50&lan=en&sdate=\" + startdate + \"&edate=\" + currentDate\n    ;\nmsg.payload = \"\"\nlet currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString());\nif (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 940,
        "wires": [
            [
                "65e67786f3f66ed7"
            ]
        ]
    },
    {
        "id": "65e67786f3f66ed7",
        "type": "http request",
        "z": "fca77f132c7d5d8f",
        "name": "Get Events (1)",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 900,
        "y": 940,
        "wires": [
            [
                "a78777ab17f8031f"
            ]
        ]
    },
    {
        "id": "a78777ab17f8031f",
        "type": "function",
        "z": "fca77f132c7d5d8f",
        "name": "Process Events",
        "func": "if (typeof msg.payload === 'object') { } else {\n    if (msg.payload.includes(\"RequestError\")) {\n        node.status(\"Request Error\");\n    } else {\n        node.status(\"Unknown Error\");\n    }\n    node.error(msg.payload);\n    return null;\n}\n\nvar recordtemp = [];\nvar temptime = \"\";\nvar temperror = \"\";\nvar tempdesc = \"\";\n\nif (msg.payload.data.record.length > 0) {\n    for (let i = 0; i < msg.payload.data.record.length; i++) {\n        temptime = msg.payload.data.record[i].time;\n        temperror = msg.payload.data.record[i].eventCode;\n        tempdesc = msg.payload.data.record[i].eventDescription;\n        recordtemp.push(temptime + \"    \" + temperror + \"    \" + tempdesc);\n        if (global.get(\"SunSynkDebug\") === 1) { node.error(recordtemp) }\n    }\n} else \n{ \n    node.status(\"No Events Found\")\n    recordtemp.push(\"No Events Found\");\n    if (global.get(\"SunSynkDebug\") === 1) {node.error(recordtemp)}\n}\n\nvar origpayload = msg.payload;\nif (origpayload.msg == \"Success\") {\n    msg.payload = {} ;\n    msg.payload.attributes = {};\n    msg.payload.attributes.events = recordtemp;\n    msg.payload.state = origpayload.msg ;\n    let currdate = new Date(); node.status(origpayload.msg + \" - \" + currdate.toLocaleString());\n    if (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\n    return msg;\n} else {\n    msg.payload = \"\";\n    msg.payload.attributes = \"\";\n    msg.payload.state = origpayload.msg ;\n    node.error( origpayload.msg);\n    node.status(origpayload.msg);\n    return null;\n}\nreturn msg; ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 940,
        "wires": [
            [
                "a93e908a1496a9ac"
            ]
        ]
    },
    {
        "id": "a93e908a1496a9ac",
        "type": "hass-post",
        "z": "fca77f132c7d5d8f",
        "endpoint": "bc1c0f273da7bbae",
        "entityid": "sensor.sunsynk_events_1",
        "name": "Update Sunsynk Events Type 1",
        "x": 1450,
        "y": 940,
        "wires": []
    },
    {
        "id": "de549111356c836d",
        "type": "function",
        "z": "fca77f132c7d5d8f",
        "name": "Create Request for Getting Events",
        "func": "var states = global.get('homeassistant.homeAssistant.states');\nvar bearer = states[\"sensor.sunsynk_access_token\"];\nvar sn = states[\"sensor.sunsynk_serial_number\"];\n\n//error checking\nif ([undefined, \"unavailable\"].includes(bearer)) { node.status(\"Undefined\"); return null }\nif ([undefined, \"unavailable\"].includes(sn)) { node.status(\"Undefined\"); return null }\n\nmsg.headers = {\n    Authorization: \"Bearer \" + bearer.state,\n    \"Content-Type\": \"application/json\",\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36\",\n    \"Connection\": \"keep-alive\",\n    \"Accept\": \"*/*\",\n    \"Cache-Control\": \"no-cache\",\n    \"Origin\": \"https://sunsynk.net\",\n    \"Referrer\": \"https://sunsynk.net\"\n}\nvar currentDate = (new Date().toJSON().slice(0, 10));\nvar fromdate = new Date();\nfromdate.setDate(fromdate.getDate() - 60);\nvar startdate = fromdate.toJSON().slice(0, 10);\nmsg.url = \"http://pv.inteless.com/api/v1/events\"\n    + \"?type=2&page=1&limit=50&lan=en&sdate=\" + startdate + \"&edate=\" + currentDate\n    ;\nmsg.payload = \"\"\nlet currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString());\nif (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1000,
        "wires": [
            [
                "70d1a3ff9766bfd2"
            ]
        ]
    },
    {
        "id": "70d1a3ff9766bfd2",
        "type": "http request",
        "z": "fca77f132c7d5d8f",
        "name": "Get Events (2)",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 900,
        "y": 1000,
        "wires": [
            [
                "653c2346ea7d304b"
            ]
        ]
    },
    {
        "id": "653c2346ea7d304b",
        "type": "function",
        "z": "fca77f132c7d5d8f",
        "name": "Process Events",
        "func": "if (typeof msg.payload === 'object') { } else {\n    if (msg.payload.includes(\"RequestError\")) {\n        node.status(\"Request Error\");\n    } else {\n        node.status(\"Unknown Error\");\n    }\n    node.error(msg.payload);\n    return null;\n}\n\nvar recordtemp = [];\nvar temptime = \"\";\nvar temperror = \"\";\nvar tempdesc = \"\";\n\nif (msg.payload.data.record.length > 0) {\n    for (let i = 0; i < msg.payload.data.record.length; i++) {\n        temptime = msg.payload.data.record[i].time;\n        temperror = msg.payload.data.record[i].eventCode;\n        tempdesc = msg.payload.data.record[i].eventDescription;\n        recordtemp.push(temptime + \"    \" + temperror + \"    \" + tempdesc);\n        if (global.get(\"SunSynkDebug\") === 1) { node.error(recordtemp) }\n    }\n} else \n{ \n    node.status(\"No Events Found\")\n    recordtemp.push(\"No Events Found\");\n    if (global.get(\"SunSynkDebug\") === 1) {node.error(recordtemp)}\n}\n\nvar origpayload = msg.payload;\nif (origpayload.msg == \"Success\") {\n    msg.payload = {} ;\n    msg.payload.attributes = {};\n    msg.payload.attributes.events = recordtemp;\n    msg.payload.state = origpayload.msg ;\n    let currdate = new Date(); node.status(origpayload.msg + \" - \" + currdate.toLocaleString());\n    if (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\n    return msg;\n} else {\n    msg.payload = \"\";\n    msg.payload.attributes = \"\";\n    msg.payload.state = origpayload.msg ;\n    node.error( origpayload.msg);\n    node.status(origpayload.msg);\n    return null;\n}\nreturn msg; ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 1000,
        "wires": [
            [
                "06b6ea4de1c8174b"
            ]
        ]
    },
    {
        "id": "06b6ea4de1c8174b",
        "type": "hass-post",
        "z": "fca77f132c7d5d8f",
        "endpoint": "bc1c0f273da7bbae",
        "entityid": "sensor.sunsynk_events_2",
        "name": "Update Sunsynk Events Type 2",
        "x": 1450,
        "y": 1000,
        "wires": []
    },
    {
        "id": "7ceb62668ca5b355",
        "type": "function",
        "z": "fca77f132c7d5d8f",
        "name": "Create Request for Getting Events",
        "func": "var states = global.get('homeassistant.homeAssistant.states');\nvar bearer = states[\"sensor.sunsynk_access_token\"];\nvar sn = states[\"sensor.sunsynk_serial_number\"];\n\n//error checking\nif ([undefined, \"unavailable\"].includes(bearer)) { node.status(\"Undefined\"); return null }\nif ([undefined, \"unavailable\"].includes(sn)) { node.status(\"Undefined\"); return null }\n\nmsg.headers = {\n    Authorization: \"Bearer \" + bearer.state,\n    \"Content-Type\": \"application/json\",\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36\",\n    \"Connection\": \"keep-alive\",\n    \"Accept\": \"*/*\",\n    \"Cache-Control\": \"no-cache\",\n    \"Origin\": \"https://sunsynk.net\",\n    \"Referrer\": \"https://sunsynk.net\"\n}\nvar currentDate = (new Date().toJSON().slice(0, 10));\nvar fromdate = new Date();\nfromdate.setDate(fromdate.getDate() - 60);\nvar startdate = fromdate.toJSON().slice(0, 10);\nmsg.url = \"http://pv.inteless.com/api/v1/events\"\n    + \"?type=3&page=1&limit=50&lan=en&sdate=\" + startdate + \"&edate=\" + currentDate\n    ;\nmsg.payload = \"\"\nlet currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString());\nif (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1060,
        "wires": [
            [
                "24707d3b6683637a"
            ]
        ]
    },
    {
        "id": "24707d3b6683637a",
        "type": "http request",
        "z": "fca77f132c7d5d8f",
        "name": "Get Events (3)",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 900,
        "y": 1060,
        "wires": [
            [
                "70a6e292c9b5eac4"
            ]
        ]
    },
    {
        "id": "70a6e292c9b5eac4",
        "type": "function",
        "z": "fca77f132c7d5d8f",
        "name": "Process Events",
        "func": "if (typeof msg.payload === 'object') { } else {\n    if (msg.payload.includes(\"RequestError\")) {\n        node.status(\"Request Error\");\n    } else {\n        node.status(\"Unknown Error\");\n    }\n    node.error(msg.payload);\n    return null;\n}\n\nvar recordtemp = [];\nvar temptime = \"\";\nvar temperror = \"\";\nvar tempdesc = \"\";\n\nif (msg.payload.data.record.length > 0) {\n    for (let i = 0; i < msg.payload.data.record.length; i++) {\n        temptime = msg.payload.data.record[i].time;\n        temperror = msg.payload.data.record[i].eventCode;\n        tempdesc = msg.payload.data.record[i].eventDescription;\n        recordtemp.push(temptime + \"    \" + temperror + \"    \" + tempdesc);\n        if (global.get(\"SunSynkDebug\") === 1) { node.error(recordtemp) }\n    }\n} else \n{ \n    node.status(\"No Events Found\")\n    recordtemp.push(\"No Events Found\");\n    if (global.get(\"SunSynkDebug\") === 1) {node.error(recordtemp)}\n}\n\nvar origpayload = msg.payload;\nif (origpayload.msg == \"Success\") {\n    msg.payload = {} ;\n    msg.payload.attributes = {};\n    msg.payload.attributes.events = recordtemp;\n    msg.payload.state = origpayload.msg ;\n    let currdate = new Date(); node.status(origpayload.msg + \" - \" + currdate.toLocaleString());\n    if (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\n    return msg;\n} else {\n    msg.payload = \"\";\n    msg.payload.attributes = \"\";\n    msg.payload.state = origpayload.msg ;\n    node.error( origpayload.msg);\n    node.status(origpayload.msg);\n    return null;\n}\nreturn msg; ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 1060,
        "wires": [
            [
                "294b444a28eb4d3d"
            ]
        ]
    },
    {
        "id": "294b444a28eb4d3d",
        "type": "hass-post",
        "z": "fca77f132c7d5d8f",
        "endpoint": "bc1c0f273da7bbae",
        "entityid": "sensor.sunsynk_events_3",
        "name": "Update Sunsynk Events Type 3",
        "x": 1450,
        "y": 1060,
        "wires": []
    },
    {
        "id": "a5e5f685a25108df",
        "type": "function",
        "z": "fca77f132c7d5d8f",
        "name": "Calc Last Update Time & General Status Check",
        "func": "var Error_ = \"\";\nvar ErrorCk = [undefined, \"unavailable\", \"DONOTEDIT\"]; //Error types to check against \n\n// Overriding Critcal Check ---- Logger Status and Update \nvar loggerupd = global.get('homeassistant.homeAssistant.states[\\'sensor.sunsynk_logger_last_update\\'].state');\nvar loggerstat = global.get('homeassistant.homeAssistant.states[\\'sensor.sunsynk_logger_status\\'].state');\nvar estatus = global.get('homeassistant.homeAssistant.states[\\'sensor.sunsynk_stats_last_update\\'].state');\nif (ErrorCk.includes(loggerupd)) { Error_ = \"Logger Update\"}\nif (ErrorCk.includes(loggerstat)) { Error_ = \"Logger Status\" }\nif (ErrorCk.includes(estatus)) { Error_ = \"Stats Last Update\" }\n// Bad Gather Data\nif (estatus.toString() === \"Invalid Date\") { Error_ = \"Bad Gather Data\" } else {\n    var startdate = new Date(estatus);\n    var start = startdate.getTime();\n    var currentdate = new Date();\n    var currentt = currentdate.getTime();\n    var diff = currentt - start;\n    if (diff > 180000) { Error_ = \"Status last updated more than 3 minutes ago. Should be minimum less than a minute\" }\n}\n// Logger last updated more than 3 minutes ago ?\nif (loggerupd.toString() === \"Invalid Date\") { Error_ = \" Bad Last Logger Update \" } else {\n    var startdate = new Date(loggerupd);\n    var start = startdate.getTime();\n    var currentdate = new Date();\n    var currentt = currentdate.getTime();\n    var diff = currentt - start;\n    if (diff > 180000) { Error_ = \"Data last updated more than 3 minutes ago. Should be minimum less than a minute\"; }\n}\n//Logger Online ? \nif (loggerstat === \"Online\") { } else { Error_ = \"Logger Not Online\" }\n\n// Specific Checks \nvar s_input = global.get('homeassistant.homeAssistant.states[\\'sensor.sunsynk_input\\'].attributes');\nif (typeof s_input.pvIV_0_ppv === \"undefined\") { Error_ = \"Input(Input)\" }\nvar s_input = global.get('homeassistant.homeAssistant.states[\\'sensor.sunsynk_grid\\'].attributes');\nif (typeof s_input.vip_0_power === \"undefined\") { Error_ = \"Input(Grid)\" }\nvar s_input = global.get('homeassistant.homeAssistant.states[\\'sensor.sunsynk_load\\'].attributes');\nif (typeof s_input.vip_0_volt === \"undefined\") { Error_ = \"Input(Load)\" }\n// Null value in Flow\nvar s_input = global.get('homeassistant.homeAssistant.states[\\'sensor.sunsynk_flow\\'].attributes');\nif (s_input.pvPower == null) { Error_ = \"Input(Flow)\" }\n\nvar states = global.get('homeassistant.homeAssistant.states');\nvar bearer = states[\"sensor.sunsynk_access_token\"];\nvar sn = states[\"sensor.sunsynk_serial_number\"];\nvar pi = states[\"sensor.plant_id_no\"];\n\n//Error_ checking\nif ([undefined, \"unavailable\"].includes(pi)) { node.status(\"Undefined\"); Error_ = \"Plant ID\" }\nif ([undefined, \"unavailable\"].includes(sn)) { node.status(\"Undefined\"); Error_ = \"Serial Number\" }\nif ([undefined, \"unavailable\"].includes(bearer)) { node.status(\"Undefined\"); Error_ = \"Bearer Token\" }\n\nvar origmsg = msg.payload;\nvar currdate = new Date();\nnode.status(currdate.toLocaleString());\nmsg.payload = {};\nmsg.payload.attributes = {};\nmsg.payload.attributes.device_class = \"timestamp\" ;\nif (Error_ === \"\") \n { msg.payload.state = currdate } else \n{ node.error(Error_ + \" - Error With Data \"); node.status(currdate.toLocaleString() + \" - \" + Error_ + \" - Error_ With Data \" ); msg.payload.state = \"Error With Incoming Data\" ; }\nreturn msg; ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 40,
        "wires": [
            [
                "3e57fb7499cefb5a"
            ]
        ]
    },
    {
        "id": "3e57fb7499cefb5a",
        "type": "hass-post",
        "z": "fca77f132c7d5d8f",
        "endpoint": "bc1c0f273da7bbae",
        "entityid": "sensor.sunsynk_stats_last_update",
        "name": "Update Last Updated Date",
        "x": 1440,
        "y": 40,
        "wires": []
    },
    {
        "id": "bc1c0f273da7bbae",
        "type": "hass-config",
        "host": "http://localhost",
        "port": "8123"
    }
]