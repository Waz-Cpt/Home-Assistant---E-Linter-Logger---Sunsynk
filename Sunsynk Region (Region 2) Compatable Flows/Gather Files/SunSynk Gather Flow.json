[
  {
    "id": "6593f488f7fef114",
    "type": "tab",
    "label": "SunSynk Gather",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "5be8af03eb55e7d3",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Get Bearer Token",
    "func": "if (typeof msg.payload === 'object') { } else {\n    if (msg.payload.includes(\"RequestError\")) {\n        node.status(\"Request Error\");\n    } else {\n        node.status(\"Unknown Error\");\n    }\n    node.error(msg.payload);\n    return null;\n}\n\nvar origpayload = msg.payload;\nif (origpayload.msg == \"Success\") \n{\n    msg.payload = msg.payload.data.access_token;\n    global.set(\"SS.Bearer\", msg.payload );\n    global.set(\"SS.Header.Bearer.Authorization\",\"Bearer \" + msg.payload);\n    let currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString());\n    if (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\n    var msgstatus = {}; msgstatus.payload = {}; msgstatus.payload.state = msg.payload;\n    return [msgstatus,msg];\n} else {\n    msg.payload = {};\n    node.status(origpayload.msg)\n    node.error({ state: origpayload.msg, data: origpayload });\n    return null;\n}",
    "outputs": 2,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 870,
    "y": 160,
    "wires": [
      [],
      [
        "e1d8e298f8ae1215",
        "b67f8bafe6d59cbb",
        "1102b96d9ab1f0f3"
      ]
    ]
  },
  {
    "id": "ef3c1d10843aebf2",
    "type": "http request",
    "z": "6593f488f7fef114",
    "d": true,
    "name": "Get inverter Serial Number",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 1460,
    "y": 120,
    "wires": [
      [
        "db58db141b40b49c"
      ]
    ]
  },
  {
    "id": "1102b96d9ab1f0f3",
    "type": "function",
    "z": "6593f488f7fef114",
    "d": true,
    "name": "Create Request inverter List",
    "func": "msg.headers = global.get(\"SS.Header.Bearer\");\nmsg.url = global.get(\"SS.url.inverter_list\");\nmsg.payload=\"\"\nnode.status(msg.payload);\nlet currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString());\nif (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1160,
    "y": 120,
    "wires": [
      [
        "ef3c1d10843aebf2"
      ]
    ]
  },
  {
    "id": "a538e10b2b5d7749",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Inverter Serial Number ( 1st Inverter )",
    "func": "var graphdate = new Date();\nfunction dateToYMD(date) {\n    var d = date.getDate();\n    var m = date.getMonth() + 1; //Month from 0 to 11\n    var y = date.getFullYear();\n    return '' + y + '-' + (m <= 9 ? '0' + m : m) + '-' + (d <= 9 ? '0' + d : d);\n}\n\nif (typeof msg.payload === 'object') { } else {\n    if (msg.payload.includes(\"RequestError\")) {\n        node.status(\"Request Error\");\n    } else {\n        node.status(\"Unknown Error\");\n    }\n    node.error(msg.payload);\n    return null;\n}\n\nvar origpayload = msg.payload;\nvar ErrorCk = global.get(\"SS.ErrorCk\"); //Error types to check against \nvar invindex = global.get(global.get(\"HA\") + '.states[\\'sensor.sunsynk_inverter_1_index\\'].state');\nif (ErrorCk.includes(invindex)) { node.status(\"inverter 1 Index Unconfigured\"); return null; }\nif (typeof msg.payload.data.infos[invindex] === \"undefined\") \n{ \n    node.error(msg.payload); \n    node.status(\"inverter 1 Index \" + invindex + \" Does not exist in return data\"); \n    return null; \n}\n\n\nif (origpayload.msg == \"Success\") {\n    global.set(\"SS.inverter1sn\",origpayload.data.infos[invindex].sn);\n    if (ErrorCk.includes(global.get(\"SS.inverter1sn\")) || ErrorCk.includes(global.get(\"SS.url.hostname\"))) {\n        node.error(\"Inv 1 SN\"); node.status(\"Inv 1 SN\");\n        global.set(\"SS.url.i1.output\", \"\");\n        global.set(\"SS.url.i1.battery\", \"\");\n        global.set(\"SS.url.i1.input\", \"\");\n        global.set(\"SS.url.i1.grid\", \"\");\n        global.set(\"SS.url.i1.load\", \"\");\n        global.set(\"SS.url.i1.settings\", \"\");\n        global.set(\"SS.url.i1.acdc\", \"\");\n        global.set(\"SS.url.i1.set\", \"\");\n        return null;\n    } else {\n        global.set(\"SS.url.i1.output\", global.get(\"SS.url.hostname\") + \"/api/v1/inverter/\" + global.get(\"SS.inverter1sn\") + \"/realtime/output\");\n        global.set(\"SS.url.i1.battery\", global.get(\"SS.url.hostname\") + \"/api/v1/inverter/battery/\" + global.get(\"SS.inverter1sn\") + \"/realtime?sn=\" + global.get(\"SS.inverter1sn\") + \"&lan\");\n        global.set(\"SS.url.i1.input\", global.get(\"SS.url.hostname\") + \"/api/v1/inverter/\" + global.get(\"SS.inverter1sn\") + \"/realtime/input\");\n        global.set(\"SS.url.i1.grid\", global.get(\"SS.url.hostname\") + \"/api/v1/inverter/grid/\" + global.get(\"SS.inverter1sn\") + \"/realtime?sn=\" + global.get(\"SS.inverter1sn\"));\n        global.set(\"SS.url.i1.load\", global.get(\"SS.url.hostname\") + \"/api/v1/inverter/load/\" + global.get(\"SS.inverter1sn\") + \"/realtime?sn=\" + global.get(\"SS.inverter1sn\"));\n        global.set(\"SS.url.i1.settings\", global.get(\"SS.url.hostname\") + \"/api/v1/common/setting/\" + global.get(\"SS.inverter1sn\") + \"/read\");\n        global.set(\"SS.url.i1.acdc\", global.get(\"SS.url.hostname\") + \"/api/v1/inverter/\" + global.get(\"SS.inverter1sn\") + \"/output/day?lan=en&date=\" + dateToYMD(graphdate) + \"&column=dc_temp,igbt_temp\");\n        global.set(\"SS.url.i1.set\", global.get(\"SS.url.hostname\") + \"/api/v1/common/setting/\" + global.get(\"SS.inverter1sn\") + \"/set\");\n    }\n    msg.payload = {};\n    msg.payload.sn = origpayload.data.infos[invindex].sn;\n    let currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString() + \" Index:\" + invindex);\n    if (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\n    var msgstatus = {}; msgstatus.payload = {}; msgstatus.payload.state = origpayload.data.infos[invindex].sn;\n    return [msgstatus,msg];\n} else {\n    msg.payload = {};\n    global.set(\"SS.url.i1.output\", \"\");\n    global.set(\"SS.url.i1.battery\", \"\");\n    global.set(\"SS.url.i1.input\", \"\");\n    global.set(\"SS.url.i1.grid\", \"\");\n    global.set(\"SS.url.i1.load\", \"\");\n    global.set(\"SS.url.i1.settings\", \"\");\n    global.set(\"SS.url.i1.acdc\", \"\");\n    global.set(\"SS.url.i1.set\", \"\");\n    node.status(origpayload.msg + \" Index:\" + invindex)\n    node.error({ state: origpayload.msg, data: origpayload });\n    return null;\n}",
    "outputs": 2,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 710,
    "y": 560,
    "wires": [
      [],
      [
        "d4a3e2904f65df93",
        "df5d7211c608060a"
      ]
    ]
  },
  {
    "id": "43918c53aecd1270",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Create Request for Getting battery Info",
    "func": "msg.headers = global.get(\"SS.Header.Bearer\");\nmsg.url = global.get(\"SS.url.i1.battery\");\nmsg.payload=\"\";\nlet currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString());\nif (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 530,
    "y": 860,
    "wires": [
      [
        "1db228cc37195bd9"
      ]
    ]
  },
  {
    "id": "1db228cc37195bd9",
    "type": "http request",
    "z": "6593f488f7fef114",
    "name": "Get inverter Battery Info",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 850,
    "y": 860,
    "wires": [
      [
        "450045ff68fbd8d6"
      ]
    ]
  },
  {
    "id": "a2a4ae59a632697a",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Create Request for Getting inverter Settings",
    "func": "msg.headers = global.get(\"SS.Header.Bearer\");\nmsg.url = global.get(\"SS.url.i1.settings\");\nmsg.payload=\"\"\nlet currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString());\nif (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 550,
    "y": 1100,
    "wires": [
      [
        "bf907a7d75a1e446"
      ]
    ]
  },
  {
    "id": "bf907a7d75a1e446",
    "type": "http request",
    "z": "6593f488f7fef114",
    "name": "Get inverter Settings",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 840,
    "y": 1100,
    "wires": [
      [
        "8d4a6fd792a66bca"
      ]
    ]
  },
  {
    "id": "726f0a7555bf5825",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Create Request for Getting Grid Info",
    "func": "msg.headers = global.get(\"SS.Header.Bearer\");\nmsg.url = global.get(\"SS.url.i1.grid\");\nmsg.payload=\"\";\nlet currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString());\nif (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 530,
    "y": 980,
    "wires": [
      [
        "65df09cfb3efb4df"
      ]
    ]
  },
  {
    "id": "65df09cfb3efb4df",
    "type": "http request",
    "z": "6593f488f7fef114",
    "name": "Get inverter Grid Info",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 840,
    "y": 980,
    "wires": [
      [
        "bf2e1b6648b3d753"
      ]
    ]
  },
  {
    "id": "c7204ddb2d5895da",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Create Request for Getting Load Info",
    "func": "msg.headers = global.get(\"SS.Header.Bearer\");\nmsg.url = global.get(\"SS.url.i1.load\");\nmsg.payload=\"\";\nlet currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString());\nif (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 530,
    "y": 1040,
    "wires": [
      [
        "dc22bf3588927ef2"
      ]
    ]
  },
  {
    "id": "dc22bf3588927ef2",
    "type": "http request",
    "z": "6593f488f7fef114",
    "name": "Get inverter Load Info",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 840,
    "y": 1040,
    "wires": [
      [
        "e26efe0ced3e1105"
      ]
    ]
  },
  {
    "id": "7c4f8f813916d940",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Create Request for Getting Input",
    "func": "msg.headers = global.get(\"SS.Header.Bearer\");\nmsg.url = global.get(\"SS.url.i1.input\");\nlet currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString());\nif (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 510,
    "y": 920,
    "wires": [
      [
        "ca03092d791f3f69"
      ]
    ]
  },
  {
    "id": "ca03092d791f3f69",
    "type": "http request",
    "z": "6593f488f7fef114",
    "name": "Get inverter Input",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 830,
    "y": 920,
    "wires": [
      [
        "9818cdedd1dde85a"
      ]
    ]
  },
  {
    "id": "2969fbbe51f15be4",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Create Request for Getting Output",
    "func": "msg.headers = global.get(\"SS.Header.Bearer\");\nmsg.url = global.get(\"SS.url.i1.output\");\nmsg.payload=\"\";\nlet currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString());\nif (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 520,
    "y": 800,
    "wires": [
      [
        "9b64c7ec70955434"
      ]
    ]
  },
  {
    "id": "9b64c7ec70955434",
    "type": "http request",
    "z": "6593f488f7fef114",
    "name": "Get inverter Output",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 830,
    "y": 800,
    "wires": [
      [
        "0eabee93191e72a1"
      ]
    ]
  },
  {
    "id": "8d4a6fd792a66bca",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Inverter Settings",
    "func": "if (typeof msg.payload === 'object') { } else {\n    if (msg.payload.includes(\"RequestError\")) {\n        node.status(\"Request Error\");\n    } else {\n        node.status(\"Unknown Error\");\n    }\n    node.error(msg.payload);\n    return null;\n}\n\nvar returnvalue = {};\n\nfunction scroll_all_items(s_payload, t_tkey) {\n    Object.entries(s_payload).forEach((entry) => {\n        const [key, value] = entry;\n        if (value === null || value === \"\") {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = \"Missing\"; }\n        } else if (s_payload[key].length === 0) {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        } else if (typeof s_payload[key] === 'object') {\n            if (Array.isArray(s_payload[key])) {\n                if (t_tkey === \"\") { process_array(s_payload[key], key); } else { process_array(s_payload[key], t_tkey + \"_\" + key); }\n            } else {\n                if (t_tkey === \"\") { scroll_all_items(s_payload[key], key); } else { scroll_all_items(s_payload[key], t_tkey + \"_\" + key); }\n            }\n        } else {\n            if (t_tkey === \"\") { returnvalue[key] = value; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        }\n    });\n    return;\n}\n\nfunction process_array(s_payload, t_tkey) {\n    if (t_tkey === \"infos_0_plantPermission\") { returnvalue[t_tkey] = \"Not Processed\" }\n    else {\n        for (let i = 0; i < s_payload.length; i++) {\n            scroll_all_items(s_payload[i], t_tkey + \"_\" + i);\n        }\n    }\n    return;\n}\n\n\nvar origpayload = msg.payload;\nif (origpayload.msg == \"Success\") {\n    msg.payload.attributes = {};\n    scroll_all_items(msg.payload.data, \"\");\n    msg.payload.attributes = returnvalue;\n    msg.payload.state = \"Success\";\n    let currdate = new Date(); node.status(origpayload.msg + \" - \" + currdate.toLocaleString());\n    if (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\n    return msg;\n} else {\n    msg.payload = {};\n    node.status(origpayload.msg)\n    node.error({ state: origpayload.msg, data: origpayload });\n    return null;\n}",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1080,
    "y": 1100,
    "wires": [
      [
        "b9cad60b515e4942"
      ]
    ]
  },
  {
    "id": "b67f8bafe6d59cbb",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Create Request for Getting Plant Info",
    "func": "msg.headers = global.get(\"SS.Header.Bearer\");\nmsg.url = global.get(\"SS.url.plants\");\nmsg.payload=\"\"\nlet currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString());\nif (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 590,
    "y": 280,
    "wires": [
      [
        "6c94c8f0902b1532"
      ]
    ]
  },
  {
    "id": "6c94c8f0902b1532",
    "type": "http request",
    "z": "6593f488f7fef114",
    "name": "Get Plant List",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 860,
    "y": 280,
    "wires": [
      [
        "a55fdc2d10e1ad8c",
        "24c31c60278b9006",
        "a07a5586581c2e83"
      ]
    ]
  },
  {
    "id": "a55fdc2d10e1ad8c",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Plant ID No",
    "func": "if (typeof msg.payload === 'object') { } else {\n    if (msg.payload.includes(\"RequestError\")) {\n        node.status(\"Request Error\");\n    } else {\n        node.status(\"Unknown Error\");\n    }\n    node.error(msg.payload);\n    return null;\n}\n//sensor.sunsynk_plant_index\nvar ErrorCk = global.get(\"SS.ErrorCk\"); //Error types to check against \nvar plantindex = global.get(global.get(\"HA\") + '.states[\\'sensor.sunsynk_plant_index\\'].state');\nif (ErrorCk.includes(plantindex)) { node.status(\"Plant Index Unconfigured\"); return null; }\nif (typeof msg.payload.data.infos[plantindex] === \"undefined\") {\n    node.error(msg.payload);\n    node.status(\"Plant Index \" + plantindex + \" Does not exist in return data\");\n    return null;\n}\n\nvar origpayload = msg.payload;\nif (origpayload.msg == \"Success\") {\n    global.set(\"SS.Plantid\", msg.payload.data.infos[plantindex].id);\n    // Setup variables\n    var items = global.get(global.get(\"HA\") + '.states[\\'sensor.sunsynk_return_items\\'].state');\n    if (ErrorCk.includes(items)) { let e = \"No Items Set\"; node.error(e); node.status(e); return null };\n    if (ErrorCk.includes(global.get(\"SS.Plantid\")) || ErrorCk.includes(global.get(\"SS.url.hostname\"))) {\n        node.error(\"Plant ID\"); node.status(\"Pant ID\");\n        global.set(\"SS.url.flow\", \"\");\n        global.set(\"SS.url.plantinvlist\", \"\");\n        return null;\n    } else {\n        global.set(\"SS.url.flow\", global.get(\"SS.url.hostname\") + \"/api/v1/plant/energy/\" + global.get(\"SS.Plantid\") + \"/flow\");\n        global.set(\"SS.url.plantinvlist\", global.get(\"SS.url.hostname\") + \"/api/v1/plant/\" + global.get(\"SS.Plantid\") + \"/inverters?page=1&limit=\" + items +\"&status=-1&type=-2\");\n    }\n    msg.payload = msg.payload.data.infos[plantindex].id;\n    node.status(\"Success\" + \" Index:\" + plantindex)\n    if (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\n    var msgstatus = {}; msgstatus.payload = {}; msgstatus.payload.state = msg.payload;\n    return [msg, msgstatus];\n} else {\n    msg.payload = {};\n    node.status(origpayload.msg + \" Index:\" + plantindex)\n    node.error({ state: origpayload.msg, data: origpayload });\n    return null;\n}",
    "outputs": 2,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1110,
    "y": 320,
    "wires": [
      [
        "e8e9a7abe222b0b7"
      ],
      [
        "44b4fb3c8bd23c26",
        "954a9ba791a5e263"
      ]
    ]
  },
  {
    "id": "e8e9a7abe222b0b7",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Get Plant Flow Data",
    "func": "msg.headers = global.get(\"SS.Header.Bearer\");\nmsg.url = global.get(\"SS.url.flow\");\nmsg.payload=\"\"\nlet currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString());\nif (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1380,
    "y": 280,
    "wires": [
      [
        "0cdbb8bc439f7039"
      ]
    ]
  },
  {
    "id": "0cdbb8bc439f7039",
    "type": "http request",
    "z": "6593f488f7fef114",
    "name": "Get Flow Data",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 1600,
    "y": 280,
    "wires": [
      [
        "89d772b5a538d104"
      ]
    ]
  },
  {
    "id": "450045ff68fbd8d6",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Sunsynk Battery Data",
    "func": "if (typeof msg.payload === 'object') { } else {\n    if (msg.payload.includes(\"RequestError\")) {\n        node.status(\"Request Error\");\n    } else {\n        node.status(\"Unknown Error\");\n    }\n    node.error(msg.payload);\n    return null;\n}\n\nvar returnvalue = {};\n\nfunction scroll_all_items(s_payload, t_tkey) {\n    Object.entries(s_payload).forEach((entry) => {\n        const [key, value] = entry;\n        if (value === null || value === \"\") {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = \"Missing\"; }\n        } else if (s_payload[key].length === 0) {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        } else if (typeof s_payload[key] === 'object') {\n            if (Array.isArray(s_payload[key])) {\n                if (t_tkey === \"\") { process_array(s_payload[key], key); } else { process_array(s_payload[key], t_tkey + \"_\" + key); }\n            } else {\n                if (t_tkey === \"\") { scroll_all_items(s_payload[key], key); } else { scroll_all_items(s_payload[key], t_tkey + \"_\" + key); }\n            }\n        } else {\n            if (t_tkey === \"\") { returnvalue[key] = value; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        }\n    });\n    return;\n}\n\nfunction process_array(s_payload, t_tkey) {\n    if (t_tkey === \"infos_0_plantPermission\") { returnvalue[t_tkey] = \"Not Processed\" }\n    else {\n        for (let i = 0; i < s_payload.length; i++) {\n            scroll_all_items(s_payload[i], t_tkey + \"_\" + i);\n        }\n    }\n    return;\n}\n\n\nvar origpayload = msg.payload;\nif (origpayload.msg == \"Success\") {\n    msg.payload.attributes = {};\n    scroll_all_items(msg.payload.data, \"\");\n    msg.payload.attributes = returnvalue;\n    msg.payload.state = parseFloat(msg.payload.data.soc);\n    let currdate = new Date(); node.status(origpayload.msg + \" - \" + currdate.toLocaleString());\n    msg.payload.attributes.soc = parseFloat(msg.payload.data.soc);\n    msg.payload.attributes.capacity = parseFloat(msg.payload.data.capacity);\n    msg.payload.attributes.correctcapacity = parseFloat(msg.payload.data.correctCap);\n    msg.payload.attributes.power = parseFloat(msg.payload.data.power);\n    msg.payload.attributes.etotalchg = parseFloat(msg.payload.data.etotalChg);\n    msg.payload.attributes.etotaldischg = parseFloat(msg.payload.data.etotalDischg);\n    msg.payload.attributes.temp = parseFloat(msg.payload.data.temp);\n    msg.payload.attributes.current = parseFloat(msg.payload.data.current);\n    msg.payload.attributes.voltage = parseFloat(msg.payload.data.voltage);\n    msg.payload.attributes.status = parseFloat(msg.payload.data.status);    \n    if (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\n    return msg;\n} else {\n    msg.payload = {};\n    node.status(origpayload.msg)\n    node.error({ state: origpayload.msg, data: origpayload });\n    return null;\n}",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1100,
    "y": 860,
    "wires": [
      [
        "67327936cc3dc1e2"
      ]
    ]
  },
  {
    "id": "9818cdedd1dde85a",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Sunsynk Input Data",
    "func": "if (typeof msg.payload === 'object') { } else {\n    if (msg.payload.includes(\"RequestError\")) {\n        node.status(\"Request Error\");\n    } else {\n        node.status(\"Unknown Error\");\n    }\n    node.error(msg.payload);\n    return null;\n}\n\nvar returnvalue = {};\n\nfunction scroll_all_items(s_payload, t_tkey) {\n    Object.entries(s_payload).forEach((entry) => {\n        const [key, value] = entry;\n        if (value === null || value === \"\") {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = \"Missing\"; }\n        } else if (s_payload[key].length === 0) {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        } else if (typeof s_payload[key] === 'object') {\n            if (Array.isArray(s_payload[key])) {\n                if (t_tkey === \"\") { process_array(s_payload[key], key); } else { process_array(s_payload[key], t_tkey + \"_\" + key); }\n            } else {\n                if (t_tkey === \"\") { scroll_all_items(s_payload[key], key); } else { scroll_all_items(s_payload[key], t_tkey + \"_\" + key); }\n            }\n        } else {\n            if (t_tkey === \"\") { returnvalue[key] = value; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        }\n    });\n    return;\n}\n\nfunction process_array(s_payload, t_tkey) {\n    if (t_tkey === \"infos_0_plantPermission\") { returnvalue[t_tkey] = \"Not Processed\" }\n    else {\n        for (let i = 0; i < s_payload.length; i++) {\n            scroll_all_items(s_payload[i], t_tkey + \"_\" + i);\n        }\n    }\n    return;\n}\n\n\nvar origpayload = msg.payload;\nif (origpayload.msg == \"Success\") {\n    msg.payload.attributes = {};\n    scroll_all_items(msg.payload.data, \"\");\n    msg.payload.attributes = returnvalue;\n    msg.payload.state = parseFloat(msg.payload.data.pvIV[0].ppv) + parseFloat(msg.payload.data.pvIV[1].ppv);\n    let currdate = new Date(); node.status(origpayload.msg + \" - \" + currdate.toLocaleString());\n    msg.payload.attributes.pv = parseFloat(msg.payload.data.pvIV[0].ppv) + parseFloat(msg.payload.data.pvIV[1].ppv);\n    msg.payload.attributes.pv1 = parseFloat(msg.payload.data.pvIV[0].ppv) ;\n    msg.payload.attributes.pv1_volt = parseFloat(msg.payload.data.pvIV[0].vpv);\n    msg.payload.attributes.pv1_current = parseFloat(msg.payload.data.pvIV[0].ipv);\n    msg.payload.attributes.pv2 = parseFloat(msg.payload.data.pvIV[1].ppv);\n    msg.payload.attributes.pv2_volt = parseFloat(msg.payload.data.pvIV[1].vpv);\n    msg.payload.attributes.pv2_current = parseFloat(msg.payload.data.pvIV[1].ipv);\n    msg.payload.attributes.pvtotal = parseFloat(msg.payload.data.etotal);\n    if (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\n    return msg;\n} else {\n    msg.payload = {};\n    node.status(origpayload.msg)\n    node.error({ state: origpayload.msg, data: origpayload });\n    return null;\n}\n\n",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1090,
    "y": 920,
    "wires": [
      [
        "043d7201eac14494"
      ]
    ]
  },
  {
    "id": "bf2e1b6648b3d753",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Sunsynk Grid",
    "func": "if (typeof msg.payload === 'object') { } else {\n    if (msg.payload.includes(\"RequestError\")) {\n        node.status(\"Request Error\");\n    } else {\n        node.status(\"Unknown Error\");\n    }\n    node.error(msg.payload);\n    return null;\n}\n\nvar returnvalue = {};\n\nfunction scroll_all_items(s_payload, t_tkey) {\n    Object.entries(s_payload).forEach((entry) => {\n        const [key, value] = entry;\n        if (value === null || value === \"\") {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = \"Missing\"; }\n        } else if (s_payload[key].length === 0) {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        } else if (typeof s_payload[key] === 'object') {\n            if (Array.isArray(s_payload[key])) {\n                if (t_tkey === \"\") { process_array(s_payload[key], key); } else { process_array(s_payload[key], t_tkey + \"_\" + key); }\n            } else {\n                if (t_tkey === \"\") { scroll_all_items(s_payload[key], key); } else { scroll_all_items(s_payload[key], t_tkey + \"_\" + key); }\n            }\n        } else {\n            if (t_tkey === \"\") { returnvalue[key] = value; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        }\n    });\n    return;\n}\n\nfunction process_array(s_payload, t_tkey) {\n    if (t_tkey === \"infos_0_plantPermission\") { returnvalue[t_tkey] = \"Not Processed\" }\n    else {\n        for (let i = 0; i < s_payload.length; i++) {\n            scroll_all_items(s_payload[i], t_tkey + \"_\" + i);\n        }\n    }\n    return;\n}\n\n\nvar origpayload = msg.payload;\nif (origpayload.msg == \"Success\") {\n    msg.payload.attributes = {};\n    scroll_all_items(msg.payload.data, \"\");\n    msg.payload.attributes = returnvalue;\n    msg.payload.state = msg.payload.data.vip[0].current;\n    let currdate = new Date(); node.status(origpayload.msg + \" - \" + currdate.toLocaleString());\n    msg.payload.attributes.total = parseFloat(msg.payload.data.etotalFrom);\n    msg.payload.attributes.volt = msg.payload.data.vip[0].volt;\n    msg.payload.attributes.current = msg.payload.data.vip[0].current;\n    var gridonline = false;\n    if (parseFloat(msg.payload.data.vip[0].volt) < 200) { var gridonline = false } else { var gridonline = true }\n    msg.payload.attributes.gridonline = gridonline ;\n    msg.payload.attributes.power = parseFloat(msg.payload.data.pac);\n    if (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\n    return msg;\n} else {\n    msg.payload = {};\n    node.status(origpayload.msg)\n    node.error({ state: origpayload.msg, data: origpayload });\n    return null;\n}",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1080,
    "y": 980,
    "wires": [
      [
        "087855b7e643aead"
      ]
    ]
  },
  {
    "id": "e26efe0ced3e1105",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Sunsynk Load",
    "func": "if (typeof msg.payload === 'object') { } else {\n    if (msg.payload.includes(\"RequestError\")) {\n        node.status(\"Request Error\");\n    } else {\n        node.status(\"Unknown Error\");\n    }\n    node.error(msg.payload);\n    return null;\n}\n\nvar returnvalue = {};\n\nfunction scroll_all_items(s_payload, t_tkey) {\n    Object.entries(s_payload).forEach((entry) => {\n        const [key, value] = entry;\n        if (value === null || value === \"\") {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = \"Missing\"; }\n        } else if (s_payload[key].length === 0) {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        } else if (typeof s_payload[key] === 'object') {\n            if (Array.isArray(s_payload[key])) {\n                if (t_tkey === \"\") { process_array(s_payload[key], key); } else { process_array(s_payload[key], t_tkey + \"_\" + key); }\n            } else {\n                if (t_tkey === \"\") { scroll_all_items(s_payload[key], key); } else { scroll_all_items(s_payload[key], t_tkey + \"_\" + key); }\n            }\n        } else {\n            if (t_tkey === \"\") { returnvalue[key] = value; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        }\n    });\n    return;\n}\n\nfunction process_array(s_payload, t_tkey) {\n    if (t_tkey === \"infos_0_plantPermission\") { returnvalue[t_tkey] = \"Not Processed\" }\n    else {\n        for (let i = 0; i < s_payload.length; i++) {\n            scroll_all_items(s_payload[i], t_tkey + \"_\" + i);\n        }\n    }\n    return;\n}\n\n\nvar origpayload = msg.payload;\nif (origpayload.msg == \"Success\") {\n    msg.payload.attributes = {};\n    scroll_all_items(msg.payload.data, \"\");\n    msg.payload.attributes = returnvalue;\n    msg.payload.state = msg.payload.data.totalPower;\n    let currdate = new Date(); node.status(origpayload.msg + \" - \" + currdate.toLocaleString());\n    msg.payload.attributes.total = parseFloat(msg.payload.data.totalUsed);\n    msg.payload.attributes.volt = msg.payload.data.vip[0].volt;\n    msg.payload.attributes.power = msg.payload.data.totalPower;\n    msg.payload.attributes.totalpower = msg.payload.data.totalPower;\n    var tempcurrent = parseFloat(msg.payload.attributes.power) / parseFloat(msg.payload.attributes.volt);\n    msg.payload.attributes.calc_current = tempcurrent.toFixed(2);\n    if (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\n    return msg ;\n} else {\n    msg.payload = {};\n    node.status(origpayload.msg)\n    node.error({ state: origpayload.msg, data: origpayload });\n    return null;\n}",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1080,
    "y": 1040,
    "wires": [
      [
        "792f06fdc93e8d27"
      ]
    ]
  },
  {
    "id": "0eabee93191e72a1",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Sunsynk inverter Output",
    "func": "if (typeof msg.payload === 'object') { } else {\n    if (msg.payload.includes(\"RequestError\")) {\n        node.status(\"Request Error\");\n    } else {\n        node.status(\"Unknown Error\");\n    }\n    node.error(msg.payload);\n    return null;\n}\n\nvar returnvalue = {};\n\nfunction scroll_all_items(s_payload, t_tkey) {\n    Object.entries(s_payload).forEach((entry) => {\n        const [key, value] = entry;\n        if (value === null || value === \"\") {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = \"Missing\"; }\n        } else if (s_payload[key].length === 0) {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        } else if (typeof s_payload[key] === 'object') {\n            if (Array.isArray(s_payload[key])) {\n                if (t_tkey === \"\") { process_array(s_payload[key], key); } else { process_array(s_payload[key], t_tkey + \"_\" + key); }\n            } else {\n                if (t_tkey === \"\") { scroll_all_items(s_payload[key], key); } else { scroll_all_items(s_payload[key], t_tkey + \"_\" + key); }\n            }\n        } else {\n            if (t_tkey === \"\") { returnvalue[key] = value; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        }\n    });\n    return;\n}\n\nfunction process_array(s_payload, t_tkey) {\n    if (t_tkey === \"infos_0_plantPermission\") { returnvalue[t_tkey] = \"Not Processed\" }\n    else {\n        for (let i = 0; i < s_payload.length; i++) {\n            scroll_all_items(s_payload[i], t_tkey + \"_\" + i);\n        }\n    }\n    return;\n}\n\n\nvar origpayload = msg.payload;\nif (origpayload.msg == \"Success\") {\n    msg.payload.attributes = {};\n    scroll_all_items(msg.payload.data, \"\");\n    msg.payload.attributes = returnvalue;\n    msg.payload.state = \"Success\";\n    msg.payload.attributes.poweressentials = parseFloat(msg.payload.data.pac);\n    msg.payload.attributes.totalpower = parseFloat(msg.payload.data.pInv) + parseFloat(msg.payload.data.pac);\n    msg.payload.attributes.poweraux = parseFloat(msg.payload.data.pInv);\n    let currdate = new Date(); node.status(origpayload.msg + \" - \" + currdate.toLocaleString());\n    if (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\n    return msg ;\n} else {\n    msg.payload = {};\n    node.status(origpayload.msg)\n    node.error({ state: origpayload.msg, data: origpayload });\n    return null;\n}\n",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1110,
    "y": 800,
    "wires": [
      [
        "5020afce301ba488"
      ]
    ]
  },
  {
    "id": "89d772b5a538d104",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Plant Flow Data",
    "func": "if (typeof msg.payload === 'object') { } else {\n    if (msg.payload.includes(\"RequestError\")) {\n        node.status(\"Request Error\");\n    } else {\n        node.status(\"Unknown Error\");\n    }\n    node.error(msg.payload);\n    return null;\n}\n\nvar returnvalue = {};\n\nfunction scroll_all_items(s_payload, t_tkey) {\n    Object.entries(s_payload).forEach((entry) => {\n        const [key, value] = entry;\n        if (value === null || value === \"\") {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = \"Missing\"; }\n        } else if (s_payload[key].length === 0) {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        } else if (typeof s_payload[key] === 'object') {\n            if (Array.isArray(s_payload[key])) {\n                if (t_tkey === \"\") { process_array(s_payload[key], key); } else { process_array(s_payload[key], t_tkey + \"_\" + key); }\n            } else {\n                if (t_tkey === \"\") { scroll_all_items(s_payload[key], key); } else { scroll_all_items(s_payload[key], t_tkey + \"_\" + key); }\n            }\n        } else {\n            if (t_tkey === \"\") { returnvalue[key] = value; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        }\n    });\n    return;\n}\n\nfunction process_array(s_payload, t_tkey) {\n    if (t_tkey === \"infos_0_plantPermission\") { returnvalue[t_tkey] = \"Not Processed\" }\n    else {\n        for (let i = 0; i < s_payload.length; i++) {\n            scroll_all_items(s_payload[i], t_tkey + \"_\" + i);\n        }\n    }\n    return;\n}\n\n\nvar origpayload = msg.payload;\nif (origpayload.msg == \"Success\") {\n    msg.payload.attributes = {};\n    scroll_all_items(msg.payload.data, \"\");\n    msg.payload.attributes = returnvalue;\n    msg.payload.state = \"Success\";\n    let currdate = new Date(); node.status(origpayload.msg + \" - \" + currdate.toLocaleString());\n    if (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\n    return msg;\n} else {\n    msg.payload = {};\n    node.status(origpayload.msg)\n    node.error({ state: origpayload.msg, data: origpayload });\n    return null;\n}\n",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1820,
    "y": 280,
    "wires": [
      [
        "5eea72a2c09b3a7c"
      ]
    ]
  },
  {
    "id": "e297cc5a1f358c73",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Sunsynk inverter List",
    "func": "if (typeof msg.payload === 'object') { } else {\n    if (msg.payload.includes(\"RequestError\")) {\n        node.status(\"Request Error\");\n    } else {\n        node.status(\"Unknown Error\");\n    }\n    node.error(msg.payload);\n    return null;\n}\nvar returnvalue = {};\n\nfunction scroll_all_items(s_payload, t_tkey) {\n    Object.entries(s_payload).forEach((entry) => {\n        const [key, value] = entry;\n        if (value === null || value === \"\") {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = \"Missing\"; }\n        } else if (s_payload[key].length === 0) {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        } else if (typeof s_payload[key] === 'object') {\n            if (Array.isArray(s_payload[key])) {\n                if (t_tkey === \"\") { process_array(s_payload[key], key); } else { process_array(s_payload[key], t_tkey + \"_\" + key); }\n            } else {\n                if (t_tkey === \"\") { scroll_all_items(s_payload[key], key); } else { scroll_all_items(s_payload[key], t_tkey + \"_\" + key); }\n            }\n        } else {\n            if (t_tkey === \"\") { returnvalue[key] = value; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        }\n    });\n    return;\n}\n\nfunction process_array(s_payload, t_tkey) {\n    if (t_tkey === \"infos_0_plantPermission\") { returnvalue[t_tkey] = \"Not Processed\" }\n    else {\n        for (let i = 0; i < s_payload.length; i++) {\n            scroll_all_items(s_payload[i], t_tkey + \"_\" + i);\n        }\n    }\n    return;\n}\n\n\nvar origpayload = msg.payload;\nif (origpayload.msg == \"Success\") {\n    msg.payload = {};\n    msg.payload.attributes = {};\n    scroll_all_items(origpayload.data, \"\");\n    msg.payload.attributes = returnvalue;\n    msg.payload.state = origpayload.msg;\n    node.status(origpayload.msg)\n    if (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\n    return msg\n} else {\n    msg.payload = {};\n    node.status(origpayload.msg)\n    node.error({ state: origpayload.msg, data: origpayload });\n    return null;\n}\n",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1380,
    "y": 420,
    "wires": [
      [
        "f6088642730e06a3"
      ]
    ]
  },
  {
    "id": "24c31c60278b9006",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Sunsynk Plant List",
    "func": "if (typeof msg.payload === 'object') { } else {\n    if (msg.payload.includes(\"RequestError\")) {\n        node.status(\"Request Error\");\n    } else {\n        node.status(\"Unknown Error\");\n    }\n    node.error(msg.payload);\n    return null;\n}\n\nvar returnvalue = {};\n\nfunction scroll_all_items(s_payload, t_tkey) {\n    Object.entries(s_payload).forEach((entry) => {\n        const [key, value] = entry;\n        if (value === null || value === \"\") {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = \"Missing\"; }\n        } else if (s_payload[key].length === 0) {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        } else if (typeof s_payload[key] === 'object') {\n            if (Array.isArray(s_payload[key])) {\n                if (t_tkey === \"\") { process_array(s_payload[key], key); } else { process_array(s_payload[key], t_tkey + \"_\" + key); }\n            } else {\n                if (t_tkey === \"\") { scroll_all_items(s_payload[key], key); } else { scroll_all_items(s_payload[key], t_tkey + \"_\" + key); }\n            }\n        } else {\n            if (t_tkey === \"\") { returnvalue[key] = value; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        }\n    });\n    return;\n}\n\nfunction process_array(s_payload, t_tkey) {\n    if (t_tkey === \"infos_0_plantPermission\") { returnvalue[t_tkey] = s_payload }\n    else {\n        for (let i = 0; i < s_payload.length; i++) {\n            scroll_all_items(s_payload[i], t_tkey + \"_\" + i);\n        }\n    }\n    return;\n}\n\n\nvar origpayload = msg.payload;\nif (origpayload.msg == \"Success\") {\n    msg.payload.attributes = {};\n    scroll_all_items(msg.payload.data, \"\");\n    node.status(origpayload.msg);\n    msg.payload.state = \"Success\";\n    msg.payload.attributes = returnvalue;\n    if (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\n    return msg\n} else {\n    msg.payload = {};\n    node.status(origpayload.msg)\n    node.error({ state: origpayload.msg, data: origpayload });\n    return null;\n}\n",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1130,
    "y": 220,
    "wires": [
      [
        "628c580d17428643"
      ]
    ]
  },
  {
    "id": "d6392b7bb7c92644",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Create Request for Login",
    "func": "msg.url = global.get(\"SS.url.token\");\nmsg.payload = global.get(\"SS.loginstring\");\nlet currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString());\nif (global.get(\"SunSynkDebug\") === 1 ) { node.error(msg); }\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 430,
    "y": 160,
    "wires": [
      [
        "fc9c362e8c1e083a",
        "dd9bbce2ceeb0c63"
      ]
    ]
  },
  {
    "id": "7f654f7160913640",
    "type": "inject",
    "z": "6593f488f7fef114",
    "name": "Inject",
    "props": [],
    "repeat": "45",
    "crontab": "",
    "once": true,
    "onceDelay": "15",
    "topic": "",
    "x": 90,
    "y": 40,
    "wires": [
      [
        "8911dd4bade9526f"
      ]
    ]
  },
  {
    "id": "fc9c362e8c1e083a",
    "type": "http request",
    "z": "6593f488f7fef114",
    "name": "",
    "method": "POST",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 670,
    "y": 160,
    "wires": [
      [
        "5be8af03eb55e7d3",
        "dd9bbce2ceeb0c63"
      ]
    ]
  },
  {
    "id": "f6088642730e06a3",
    "type": "hass-post",
    "z": "6593f488f7fef114",
    "endpoint": "bc1c0f273da7bbae",
    "entityid": "sensor.sunsynk_inverter_list",
    "name": "Update sensor.sunsynk_inverter_list",
    "x": 1730,
    "y": 420,
    "wires": []
  },
  {
    "id": "5eea72a2c09b3a7c",
    "type": "hass-post",
    "z": "6593f488f7fef114",
    "endpoint": "bc1c0f273da7bbae",
    "entityid": "sensor.sunsynk_flow",
    "name": "Update SunSynk Flow",
    "x": 2040,
    "y": 280,
    "wires": []
  },
  {
    "id": "67327936cc3dc1e2",
    "type": "hass-post",
    "z": "6593f488f7fef114",
    "endpoint": "bc1c0f273da7bbae",
    "entityid": "sensor.sunsynk_battery",
    "name": "Update SunSynk Battery",
    "x": 1350,
    "y": 860,
    "wires": []
  },
  {
    "id": "5020afce301ba488",
    "type": "hass-post",
    "z": "6593f488f7fef114",
    "endpoint": "bc1c0f273da7bbae",
    "entityid": "sensor.sunsynk_output",
    "name": "Update SunSynk Output",
    "x": 1350,
    "y": 800,
    "wires": []
  },
  {
    "id": "043d7201eac14494",
    "type": "hass-post",
    "z": "6593f488f7fef114",
    "endpoint": "bc1c0f273da7bbae",
    "entityid": "sensor.sunsynk_input",
    "name": "Update SunSynk Input",
    "x": 1340,
    "y": 920,
    "wires": []
  },
  {
    "id": "087855b7e643aead",
    "type": "hass-post",
    "z": "6593f488f7fef114",
    "endpoint": "bc1c0f273da7bbae",
    "entityid": "sensor.sunsynk_grid",
    "name": "Update SunSynk Grid",
    "x": 1340,
    "y": 980,
    "wires": []
  },
  {
    "id": "792f06fdc93e8d27",
    "type": "hass-post",
    "z": "6593f488f7fef114",
    "endpoint": "bc1c0f273da7bbae",
    "entityid": "sensor.sunsynk_load",
    "name": "Update SunSynk Load",
    "x": 1340,
    "y": 1040,
    "wires": []
  },
  {
    "id": "b9cad60b515e4942",
    "type": "hass-post",
    "z": "6593f488f7fef114",
    "endpoint": "bc1c0f273da7bbae",
    "entityid": "sensor.sunsynk_settings",
    "name": "Update SunSynk Settings",
    "x": 1350,
    "y": 1100,
    "wires": []
  },
  {
    "id": "628c580d17428643",
    "type": "hass-post",
    "z": "6593f488f7fef114",
    "endpoint": "bc1c0f273da7bbae",
    "entityid": "sensor.sunsynk_plant_list",
    "name": "Update Sunsynk Plant List",
    "x": 1380,
    "y": 220,
    "wires": []
  },
  {
    "id": "e51970912f6c77e3",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Create Request for Getting Events",
    "func": "msg.headers = global.get(\"SS.Header.Bearer\");\nmsg.url = global.get(\"SS.url.events.1\");\nmsg.payload = \"\"\nlet currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString());\nif (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\nreturn msg;\n",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 520,
    "y": 1380,
    "wires": [
      [
        "449ac068bf20bcf3"
      ]
    ]
  },
  {
    "id": "449ac068bf20bcf3",
    "type": "http request",
    "z": "6593f488f7fef114",
    "name": "Get Events (1)",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 820,
    "y": 1380,
    "wires": [
      [
        "9d428ee360e3f34f",
        "668814dc76869d6b"
      ]
    ]
  },
  {
    "id": "9d428ee360e3f34f",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Process Events",
    "func": "if (typeof msg.payload === 'object') { } else {\n    if (msg.payload.includes(\"RequestError\")) {\n        node.status(\"Request Error\");\n    } else {\n        node.status(\"Unknown Error\");\n    }\n    node.error(msg.payload);\n    return null;\n}\n\nvar recordtemp = [];\nvar temptime = \"\";\nvar temperror = \"\";\nvar tempdesc = \"\";\n\nif (msg.payload.data.record.length > 0) {\n    for (let i = 0; i < msg.payload.data.record.length; i++) {\n        recordtemp.push(msg.payload.data.record[i].time + \" - \" + msg.payload.data.record[i].sn + \" - \" + msg.payload.data.record[i].eventCode + \" - \" + msg.payload.data.record[i].eventDescription);\n        if (global.get(\"SunSynkDebug\") === 1) { node.error(recordtemp) }\n    }\n} else \n{ \n    node.status(\"No Events Found\")\n    recordtemp.push(\"No Events Found\");\n    if (global.get(\"SunSynkDebug\") === 1) {node.error(recordtemp)}\n}\n\nvar origpayload = msg.payload;\nif (origpayload.msg == \"Success\") {\n    msg.payload = {} ;\n    msg.payload.attributes = {};\n    msg.payload.attributes.events = recordtemp;\n    msg.payload.state = origpayload.msg ;\n    let currdate = new Date(); node.status(origpayload.msg + \" - \" + currdate.toLocaleString());\n    if (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\n    return msg;\n} else {\n    msg.payload = \"\";\n    msg.payload.attributes = \"\";\n    msg.payload.state = origpayload.msg ;\n    node.error( origpayload.msg);\n    node.status(origpayload.msg);\n    return null;\n}\nreturn msg; ",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1080,
    "y": 1380,
    "wires": [
      [
        "cf361185b108b393"
      ]
    ]
  },
  {
    "id": "cf361185b108b393",
    "type": "hass-post",
    "z": "6593f488f7fef114",
    "endpoint": "bc1c0f273da7bbae",
    "entityid": "sensor.sunsynk_events_1",
    "name": "Update Sunsynk Events Type 1",
    "x": 1370,
    "y": 1380,
    "wires": []
  },
  {
    "id": "5ba80933f20da45b",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Create Request for Getting Events",
    "func": "msg.headers = global.get(\"SS.Header.Bearer\");\nmsg.url = global.get(\"SS.url.events.2\");\nmsg.payload = \"\"\nlet currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString());\nif (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\nreturn msg;\n",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 520,
    "y": 1440,
    "wires": [
      [
        "9ff8f649ce4afb5b"
      ]
    ]
  },
  {
    "id": "9ff8f649ce4afb5b",
    "type": "http request",
    "z": "6593f488f7fef114",
    "name": "Get Events (2)",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 820,
    "y": 1440,
    "wires": [
      [
        "21fb92d384817e42",
        "668814dc76869d6b"
      ]
    ]
  },
  {
    "id": "21fb92d384817e42",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Process Events",
    "func": "if (typeof msg.payload === 'object') { } else {\n    if (msg.payload.includes(\"RequestError\")) {\n        node.status(\"Request Error\");\n    } else {\n        node.status(\"Unknown Error\");\n    }\n    node.error(msg.payload);\n    return null;\n}\n\nvar recordtemp = [];\nvar temptime = \"\";\nvar temperror = \"\";\nvar tempdesc = \"\";\n\nif (msg.payload.data.record.length > 0) {\n    for (let i = 0; i < msg.payload.data.record.length; i++) {\n        recordtemp.push(msg.payload.data.record[i].time + \" - \" + msg.payload.data.record[i].sn + \" - \" + msg.payload.data.record[i].eventCode + \" - \" + msg.payload.data.record[i].eventDescription);\n        if (global.get(\"SunSynkDebug\") === 1) { node.error(recordtemp) }\n    }\n} else \n{ \n    node.status(\"No Events Found\")\n    recordtemp.push(\"No Events Found\");\n    if (global.get(\"SunSynkDebug\") === 1) {node.error(recordtemp)}\n}\n\nvar origpayload = msg.payload;\nif (origpayload.msg == \"Success\") {\n    msg.payload = {} ;\n    msg.payload.attributes = {};\n    msg.payload.attributes.events = recordtemp;\n    msg.payload.state = origpayload.msg ;\n    let currdate = new Date(); node.status(origpayload.msg + \" - \" + currdate.toLocaleString());\n    if (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\n    return msg;\n} else {\n    msg.payload = \"\";\n    msg.payload.attributes = \"\";\n    msg.payload.state = origpayload.msg ;\n    node.error( origpayload.msg);\n    node.status(origpayload.msg);\n    return null;\n}\nreturn msg; ",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1080,
    "y": 1440,
    "wires": [
      [
        "0922e2d18ba9a2c6"
      ]
    ]
  },
  {
    "id": "0922e2d18ba9a2c6",
    "type": "hass-post",
    "z": "6593f488f7fef114",
    "endpoint": "bc1c0f273da7bbae",
    "entityid": "sensor.sunsynk_events_2",
    "name": "Update Sunsynk Events Type 2",
    "x": 1370,
    "y": 1440,
    "wires": []
  },
  {
    "id": "f866a2fe2cc14dde",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Create Request for Getting Events",
    "func": "msg.headers = global.get(\"SS.Header.Bearer\");\nmsg.url = global.get(\"SS.url.events.3\");\nmsg.payload = \"\"\nlet currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString());\nif (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\nreturn msg;\n",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 520,
    "y": 1500,
    "wires": [
      [
        "044fd35e5a47eaec"
      ]
    ]
  },
  {
    "id": "044fd35e5a47eaec",
    "type": "http request",
    "z": "6593f488f7fef114",
    "name": "Get Events (3)",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 820,
    "y": 1500,
    "wires": [
      [
        "7f2c3b19b4064af9",
        "668814dc76869d6b"
      ]
    ]
  },
  {
    "id": "7f2c3b19b4064af9",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Process Events",
    "func": "if (typeof msg.payload === 'object') { } else {\n    if (msg.payload.includes(\"RequestError\")) {\n        node.status(\"Request Error\");\n    } else {\n        node.status(\"Unknown Error\");\n    }\n    node.error(msg.payload);\n    return null;\n}\n\nvar recordtemp = [];\nvar temptime = \"\";\nvar temperror = \"\";\nvar tempdesc = \"\";\n\nif (msg.payload.data.record.length > 0) {\n    for (let i = 0; i < msg.payload.data.record.length; i++) {\n        recordtemp.push(msg.payload.data.record[i].time + \" - \" + msg.payload.data.record[i].sn + \" - \" + msg.payload.data.record[i].eventCode + \" - \" + msg.payload.data.record[i].eventDescription);\n        if (global.get(\"SunSynkDebug\") === 1) { node.error(recordtemp) }\n    }\n} else \n{ \n    node.status(\"No Events Found\")\n    recordtemp.push(\"No Events Found\");\n    if (global.get(\"SunSynkDebug\") === 1) {node.error(recordtemp)}\n}\n\nvar origpayload = msg.payload;\nif (origpayload.msg == \"Success\") {\n    msg.payload = {} ;\n    msg.payload.attributes = {};\n    msg.payload.attributes.events = recordtemp;\n    msg.payload.state = origpayload.msg ;\n    let currdate = new Date(); node.status(origpayload.msg + \" - \" + currdate.toLocaleString());\n    if (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\n    return msg;\n} else {\n    msg.payload = \"\";\n    msg.payload.attributes = \"\";\n    msg.payload.state = origpayload.msg ;\n    node.error( origpayload.msg);\n    node.status(origpayload.msg);\n    return null;\n}\nreturn msg; ",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1080,
    "y": 1500,
    "wires": [
      [
        "0ebaa1df04209144"
      ]
    ]
  },
  {
    "id": "0ebaa1df04209144",
    "type": "hass-post",
    "z": "6593f488f7fef114",
    "endpoint": "bc1c0f273da7bbae",
    "entityid": "sensor.sunsynk_events_3",
    "name": "Update Sunsynk Events Type 3",
    "x": 1370,
    "y": 1500,
    "wires": []
  },
  {
    "id": "7d800890195450be",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Calc Last Update Time & General Status Check",
    "func": "var origmsg = msg.payload;\nvar currdate = new Date();\nnode.status(currdate.toLocaleString());\nmsg.payload = {};\nmsg.payload.attributes = {};\nmsg.payload.state = currdate; \nmsg.payload.attributes.device_class = \"timestamp\"; \n\nfunction errorstatus(errorvar)\n{\n    node.status(\" Error Found : \" + errorvar);\n    node.error(errorvar + \" - Error With Data \"); \n    node.status(currdate.toLocaleString() + \" - \" + errorvar + \" - Error_ With Data \"); \n    msg.payload.state = \"Error With Incoming Data\";\n    msg.payload.attributes = {} ; \n}\n\nvar ErrorCk = global.get(\"SS.ErrorCk\") ; //Error types to check against \n\n// Overriding Critcal Check ---- Logger Status and Update \nvar loggerupd = global.get(global.get(\"HA\") + '.states[\\'sensor.sunsynk_logger_last_update\\'].state');\nvar loggerstat = global.get(global.get(\"HA\") + '.states[\\'sensor.sunsynk_logger_status\\'].state');\nvar estatus = global.get(global.get(\"HA\") + '.states[\\'sensor.sunsynk_stats_last_update\\'].state');\nif (ErrorCk.includes(loggerupd)) { errorstatus(\"Logger Update\") }\nif (ErrorCk.includes(loggerstat)) { errorstatus(\"Logger Status\") }\nif (ErrorCk.includes(estatus)) { errorstatus(\"Stats Last Update\") }\n// Bad Gather Data\nif (estatus.toString() === \"Invalid Date\") { errorstatus(\"Bad Gather Data\") } else {\n    var startdate = new Date(estatus);\n    var start = startdate.getTime();\n    var currentdate = new Date();\n    var currentt = currentdate.getTime();\n    var diff = currentt - start;\n    if (diff > 180000) { errorstatus(\"Status last updated more than 3 minutes ago. Should be minimum less than a minute\") }\n}\n// Logger last updated more than 3 minutes ago ?\nif (loggerupd.toString() === \"Invalid Date\") { errorstatus(\" Bad Last Logger Update \") } else {\n    var startdate = new Date(loggerupd);\n    var start = startdate.getTime();\n    var currentdate = new Date();\n    var currentt = currentdate.getTime();\n    var diff = currentt - start;\n    if (diff > 180000) { errorstatus(\"Data last updated more than 3 minutes ago. Should be minimum less than a minute\"); }\n}\n//Logger Online ? \nif (loggerstat === \"Online\") { } else { errorstatus(\"Logger Not Online\") }\n\n// Specific Checks \nvar s_input = global.get(global.get(\"HA\") + '.states[\\'sensor.sunsynk_input\\'].attributes');\nif (typeof s_input.pvIV_0_ppv === \"undefined\") { errorstatus(\"Input(Input)\") }\nvar s_input = global.get(global.get(\"HA\") + '.states[\\'sensor.sunsynk_grid\\'].attributes');\nif (typeof s_input.vip_0_power === \"undefined\") { errorstatus(\"Input(Grid)\") }\nvar s_input = global.get(global.get(\"HA\") + '.states[\\'sensor.sunsynk_load\\'].attributes');\nif (typeof s_input.vip_0_volt === \"undefined\") { errorstatus(\"Input(Load)\") }\n// Null value in Flow\nvar s_input = global.get(global.get(\"HA\") + '.states[\\'sensor.sunsynk_flow\\'].attributes');\nif (s_input.pvPower == null) { errorstatus(\"Input(Flow)\") }\n\nreturn msg; ",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 500,
    "y": 40,
    "wires": [
      [
        "35bfbad69a7348c8"
      ]
    ]
  },
  {
    "id": "35bfbad69a7348c8",
    "type": "hass-post",
    "z": "6593f488f7fef114",
    "endpoint": "bc1c0f273da7bbae",
    "entityid": "sensor.sunsynk_stats_last_update",
    "name": "Update Last Updated Date",
    "x": 1040,
    "y": 40,
    "wires": []
  },
  {
    "id": "d4a3e2904f65df93",
    "type": "delay",
    "z": "6593f488f7fef114",
    "name": "",
    "pauseType": "rate",
    "timeout": "5",
    "timeoutUnits": "seconds",
    "rate": "1",
    "nbRateUnits": "60",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": true,
    "allowrate": false,
    "outputs": 1,
    "x": 240,
    "y": 720,
    "wires": [
      [
        "2969fbbe51f15be4",
        "43918c53aecd1270",
        "7c4f8f813916d940",
        "726f0a7555bf5825",
        "c7204ddb2d5895da",
        "a2a4ae59a632697a",
        "e51970912f6c77e3",
        "5ba80933f20da45b",
        "f866a2fe2cc14dde",
        "43067ea5dbc145da"
      ]
    ]
  },
  {
    "id": "ce74a7537821e5e6",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Inverter Serial Number ( 2nd inverter )",
    "func": "var graphdate = new Date();\nfunction dateToYMD(date) {\n    var d = date.getDate();\n    var m = date.getMonth() + 1; //Month from 0 to 11\n    var y = date.getFullYear();\n    return '' + y + '-' + (m <= 9 ? '0' + m : m) + '-' + (d <= 9 ? '0' + d : d);\n}\n\nif (typeof msg.payload === 'object') { } else {\n    if (msg.payload.includes(\"RequestError\")) {\n        node.status(\"Request Error\");\n    } else {\n        node.status(\"Unknown Error\");\n    }\n    node.error(msg.payload);\n    return null;\n}\n\nvar origpayload = msg.payload;\nvar ErrorCk = global.get(\"SS.ErrorCk\"); //Error types to check against \nvar invindex = global.get(global.get(\"HA\") + '.states[\\'sensor.sunsynk_inverter_2_index\\'].state');\nif (ErrorCk.includes(invindex)) { node.status(\"Inverter 2 Index Unconfigured\"); return null; }\nif (typeof msg.payload.data.infos[invindex] === \"undefined\") \n{ \n    node.error(msg.payload); \n    node.status(\"Inverter 2 Index \" + invindex + \" does not exist in return data\"); \n    return null; \n}\n\n\nif (origpayload.msg == \"Success\") {\n    global.set(\"SS.inverter2sn\", origpayload.data.infos[invindex].sn);\n    if (ErrorCk.includes(global.get(\"SS.inverter2sn\")) || ErrorCk.includes(global.get(\"SS.url.hostname\"))) {\n        node.error(\"Inv 2 SN\"); node.status(\"Inv 2 SN\");\n        global.set(\"SS.url.i2.output\", \"\");\n        global.set(\"SS.url.i2.battery\", \"\");\n        global.set(\"SS.url.i2.input\", \"\");\n        global.set(\"SS.url.i2.grid\", \"\");\n        global.set(\"SS.url.i2.load\", \"\");\n        global.set(\"SS.url.i2.settings\", \"\");\n        global.set(\"SS.url.i2.acdc\", \"\");\n        global.set(\"SS.url.i2.set\", \"\");\n        return null;\n    } else {\n        global.set(\"SS.url.i2.output\", global.get(\"SS.url.hostname\") + \"/api/v1/inverter/\" + global.get(\"SS.inverter2sn\") + \"/realtime/output\");\n        global.set(\"SS.url.i2.battery\", global.get(\"SS.url.hostname\") + \"/api/v1/inverter/battery/\" + global.get(\"SS.inverter2sn\") + \"/realtime?sn=\" + global.get(\"SS.inverter2sn\") + \"&lan\");\n        global.set(\"SS.url.i2.input\", global.get(\"SS.url.hostname\") + \"/api/v1/inverter/\" + global.get(\"SS.inverter2sn\") + \"/realtime/input\");\n        global.set(\"SS.url.i2.grid\", global.get(\"SS.url.hostname\") + \"/api/v1/inverter/grid/\" + global.get(\"SS.inverter2sn\") + \"/realtime?sn=\" + global.get(\"SS.inverter2sn\"));\n        global.set(\"SS.url.i2.load\", global.get(\"SS.url.hostname\") + \"/api/v1/inverter/load/\" + global.get(\"SS.inverter2sn\") + \"/realtime?sn=\" + global.get(\"SS.inverter2sn\"));\n        global.set(\"SS.url.i2.settings\", global.get(\"SS.url.hostname\") + \"/api/v1/common/setting/\" + global.get(\"SS.inverter2sn\") + \"/read\");\n        global.set(\"SS.url.i2.acdc\", global.get(\"SS.url.hostname\") + \"/api/v1/inverter/\" + global.get(\"SS.inverter2sn\") + \"/output/day?lan=en&date=\" + dateToYMD(graphdate) + \"&column=dc_temp,igbt_temp\");\n        global.set(\"SS.url.i2.set\", global.get(\"SS.url.hostname\") + \"/api/v1/common/setting/\" + global.get(\"SS.inverter2sn\") + \"/set\");\n    }\n    msg.payload = {};\n    msg.payload.sn = origpayload.data.infos[invindex].sn;\n    let currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString() + \" Index:\" + invindex);\n    if (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\n    var msgstatus = {}; msgstatus.payload = {}; msgstatus.payload.state = origpayload.data.infos[invindex].sn;\n    return [msgstatus, msg];\n} else {\n    global.set(\"SS.url.i2.output\", \"\");\n    global.set(\"SS.url.i2.battery\", \"\");\n    global.set(\"SS.url.i2.input\", \"\");\n    global.set(\"SS.url.i2.grid\", \"\");\n    global.set(\"SS.url.i2.load\", \"\");\n    global.set(\"SS.url.i2.settings\", \"\");\n    global.set(\"SS.url.i2.acdc\", \"\");\n    global.set(\"SS.url.i2.set\", \"\");\n    msg.payload = {};\n    node.status(origpayload.msg + \" Index:\" + invindex)\n    node.error({ state: origpayload.msg, data: origpayload });\n    return null;\n}",
    "outputs": 2,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1430,
    "y": 560,
    "wires": [
      [],
      [
        "9446ef9d4eba8b0b",
        "e7b3422bcddcc13b"
      ]
    ]
  },
  {
    "id": "21f1ade9a0c01e99",
    "type": "http request",
    "z": "6593f488f7fef114",
    "name": "Get inverter Battery Info",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 2050,
    "y": 860,
    "wires": [
      [
        "e03d2a7f15cda37c"
      ]
    ]
  },
  {
    "id": "3d4b73b95be38d13",
    "type": "http request",
    "z": "6593f488f7fef114",
    "name": "Get inverter Settings",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 2040,
    "y": 1100,
    "wires": [
      [
        "3cc133e345fbe9b5"
      ]
    ]
  },
  {
    "id": "9f05aa35669d88e1",
    "type": "http request",
    "z": "6593f488f7fef114",
    "name": "Get inverter Grid Info",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 2040,
    "y": 980,
    "wires": [
      [
        "fbf0ee91c7d6d909"
      ]
    ]
  },
  {
    "id": "6dd9af42374901bb",
    "type": "http request",
    "z": "6593f488f7fef114",
    "name": "Get inverter Load Info",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 2040,
    "y": 1040,
    "wires": [
      [
        "bbee4b12b7458fb4"
      ]
    ]
  },
  {
    "id": "c057e64c9fd3df8e",
    "type": "http request",
    "z": "6593f488f7fef114",
    "name": "Get inverter Input",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 2030,
    "y": 920,
    "wires": [
      [
        "f27166052bcc8bc5"
      ]
    ]
  },
  {
    "id": "0211ec7b69137a9f",
    "type": "http request",
    "z": "6593f488f7fef114",
    "name": "Get inverter Output",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 2030,
    "y": 800,
    "wires": [
      [
        "8c8cda34f2bbd079"
      ]
    ]
  },
  {
    "id": "3cc133e345fbe9b5",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Inverter Settings",
    "func": "if (typeof msg.payload === 'object') { } else {\n    if (msg.payload.includes(\"RequestError\")) {\n        node.status(\"Request Error\");\n    } else {\n        node.status(\"Unknown Error\");\n    }\n    node.error(msg.payload);\n    return null;\n}\n\nvar returnvalue = {};\n\nfunction scroll_all_items(s_payload, t_tkey) {\n    Object.entries(s_payload).forEach((entry) => {\n        const [key, value] = entry;\n        if (value === null || value === \"\") {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = \"Missing\"; }\n        } else if (s_payload[key].length === 0) {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        } else if (typeof s_payload[key] === 'object') {\n            if (Array.isArray(s_payload[key])) {\n                if (t_tkey === \"\") { process_array(s_payload[key], key); } else { process_array(s_payload[key], t_tkey + \"_\" + key); }\n            } else {\n                if (t_tkey === \"\") { scroll_all_items(s_payload[key], key); } else { scroll_all_items(s_payload[key], t_tkey + \"_\" + key); }\n            }\n        } else {\n            if (t_tkey === \"\") { returnvalue[key] = value; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        }\n    });\n    return;\n}\n\nfunction process_array(s_payload, t_tkey) {\n    if (t_tkey === \"infos_0_plantPermission\") { returnvalue[t_tkey] = \"Not Processed\" }\n    else {\n        for (let i = 0; i < s_payload.length; i++) {\n            scroll_all_items(s_payload[i], t_tkey + \"_\" + i);\n        }\n    }\n    return;\n}\n\n\nvar origpayload = msg.payload;\nif (origpayload.msg == \"Success\") {\n    msg.payload.attributes = {};\n    scroll_all_items(msg.payload.data, \"\");\n    msg.payload.attributes = returnvalue;\n    msg.payload.state = \"Success\";\n    let currdate = new Date(); node.status(origpayload.msg + \" - \" + currdate.toLocaleString());\n    if (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\n    return msg;\n} else {\n    msg.payload = {};\n    node.status(origpayload.msg)\n    node.error({ state: origpayload.msg, data: origpayload });\n    return null;\n}",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 2280,
    "y": 1100,
    "wires": [
      [
        "7514a5c7d0678bc8"
      ]
    ]
  },
  {
    "id": "e03d2a7f15cda37c",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Sunsynk Battery Data",
    "func": "if (typeof msg.payload === 'object') { } else {\n    if (msg.payload.includes(\"RequestError\")) {\n        node.status(\"Request Error\");\n    } else {\n        node.status(\"Unknown Error\");\n    }\n    node.error(msg.payload);\n    return null;\n}\n\nvar returnvalue = {};\n\nfunction scroll_all_items(s_payload, t_tkey) {\n    Object.entries(s_payload).forEach((entry) => {\n        const [key, value] = entry;\n        if (value === null || value === \"\") {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = \"Missing\"; }\n        } else if (s_payload[key].length === 0) {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        } else if (typeof s_payload[key] === 'object') {\n            if (Array.isArray(s_payload[key])) {\n                if (t_tkey === \"\") { process_array(s_payload[key], key); } else { process_array(s_payload[key], t_tkey + \"_\" + key); }\n            } else {\n                if (t_tkey === \"\") { scroll_all_items(s_payload[key], key); } else { scroll_all_items(s_payload[key], t_tkey + \"_\" + key); }\n            }\n        } else {\n            if (t_tkey === \"\") { returnvalue[key] = value; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        }\n    });\n    return;\n}\n\nfunction process_array(s_payload, t_tkey) {\n    if (t_tkey === \"infos_0_plantPermission\") { returnvalue[t_tkey] = \"Not Processed\" }\n    else {\n        for (let i = 0; i < s_payload.length; i++) {\n            scroll_all_items(s_payload[i], t_tkey + \"_\" + i);\n        }\n    }\n    return;\n}\n\n\nvar origpayload = msg.payload;\nif (origpayload.msg == \"Success\") {\n    msg.payload.attributes = {};\n    scroll_all_items(msg.payload.data, \"\");\n    msg.payload.attributes = returnvalue;\n    msg.payload.state = \"Success\";\n    let currdate = new Date(); node.status(origpayload.msg + \" - \" + currdate.toLocaleString());\n    if (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\n    return msg;\n} else {\n    msg.payload = {};\n    node.status(origpayload.msg)\n    node.error({ state: origpayload.msg, data: origpayload });\n    return null;\n}",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 2300,
    "y": 860,
    "wires": [
      [
        "fdbe4f7a064fed74"
      ]
    ]
  },
  {
    "id": "f27166052bcc8bc5",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Sunsynk Input Data",
    "func": "if (typeof msg.payload === 'object') { } else {\n    if (msg.payload.includes(\"RequestError\")) {\n        node.status(\"Request Error\");\n    } else {\n        node.status(\"Unknown Error\");\n    }\n    node.error(msg.payload);\n    return null;\n}\n\nvar returnvalue = {};\n\nfunction scroll_all_items(s_payload, t_tkey) {\n    Object.entries(s_payload).forEach((entry) => {\n        const [key, value] = entry;\n        if (value === null || value === \"\") {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = \"Missing\"; }\n        } else if (s_payload[key].length === 0) {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        } else if (typeof s_payload[key] === 'object') {\n            if (Array.isArray(s_payload[key])) {\n                if (t_tkey === \"\") { process_array(s_payload[key], key); } else { process_array(s_payload[key], t_tkey + \"_\" + key); }\n            } else {\n                if (t_tkey === \"\") { scroll_all_items(s_payload[key], key); } else { scroll_all_items(s_payload[key], t_tkey + \"_\" + key); }\n            }\n        } else {\n            if (t_tkey === \"\") { returnvalue[key] = value; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        }\n    });\n    return;\n}\n\nfunction process_array(s_payload, t_tkey) {\n    if (t_tkey === \"infos_0_plantPermission\") { returnvalue[t_tkey] = \"Not Processed\" }\n    else {\n        for (let i = 0; i < s_payload.length; i++) {\n            scroll_all_items(s_payload[i], t_tkey + \"_\" + i);\n        }\n    }\n    return;\n}\n\n\nvar origpayload = msg.payload;\nif (origpayload.msg == \"Success\") {\n    msg.payload.attributes = {};\n    scroll_all_items(msg.payload.data, \"\");\n    msg.payload.attributes = returnvalue;\n    msg.payload.state = parseFloat(msg.payload.data.pvIV[0].ppv) + parseFloat(msg.payload.data.pvIV[1].ppv);\n    let currdate = new Date(); node.status(origpayload.msg + \" - \" + currdate.toLocaleString());\n    msg.payload.attributes.pv = parseFloat(msg.payload.data.pvIV[0].ppv) + parseFloat(msg.payload.data.pvIV[1].ppv);\n    msg.payload.attributes.pv1 = parseFloat(msg.payload.data.pvIV[0].ppv);\n    msg.payload.attributes.pv1_volt = parseFloat(msg.payload.data.pvIV[0].vpv);\n    msg.payload.attributes.pv1_current = parseFloat(msg.payload.data.pvIV[0].ipv);\n    msg.payload.attributes.pv2 = parseFloat(msg.payload.data.pvIV[1].ppv);\n    msg.payload.attributes.pv2_volt = parseFloat(msg.payload.data.pvIV[1].vpv);\n    msg.payload.attributes.pv2_current = parseFloat(msg.payload.data.pvIV[1].ipv);\n    msg.payload.attributes.pvtotal = parseFloat(msg.payload.data.etotal);\n    if (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\n    return msg;\n} else {\n    msg.payload = {};\n    node.status(origpayload.msg)\n    node.error({ state: origpayload.msg, data: origpayload });\n    return null;\n}",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 2290,
    "y": 920,
    "wires": [
      [
        "72e175a1389dc7da"
      ]
    ]
  },
  {
    "id": "fbf0ee91c7d6d909",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Sunsynk Grid",
    "func": "if (typeof msg.payload === 'object') { } else {\n    if (msg.payload.includes(\"RequestError\")) {\n        node.status(\"Request Error\");\n    } else {\n        node.status(\"Unknown Error\");\n    }\n    node.error(msg.payload);\n    return null;\n}\n\nvar returnvalue = {};\n\nfunction scroll_all_items(s_payload, t_tkey) {\n    Object.entries(s_payload).forEach((entry) => {\n        const [key, value] = entry;\n        if (value === null || value === \"\") {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = \"Missing\"; }\n        } else if (s_payload[key].length === 0) {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        } else if (typeof s_payload[key] === 'object') {\n            if (Array.isArray(s_payload[key])) {\n                if (t_tkey === \"\") { process_array(s_payload[key], key); } else { process_array(s_payload[key], t_tkey + \"_\" + key); }\n            } else {\n                if (t_tkey === \"\") { scroll_all_items(s_payload[key], key); } else { scroll_all_items(s_payload[key], t_tkey + \"_\" + key); }\n            }\n        } else {\n            if (t_tkey === \"\") { returnvalue[key] = value; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        }\n    });\n    return;\n}\n\nfunction process_array(s_payload, t_tkey) {\n    if (t_tkey === \"infos_0_plantPermission\") { returnvalue[t_tkey] = \"Not Processed\" }\n    else {\n        for (let i = 0; i < s_payload.length; i++) {\n            scroll_all_items(s_payload[i], t_tkey + \"_\" + i);\n        }\n    }\n    return;\n}\n\n\nvar origpayload = msg.payload;\nif (origpayload.msg == \"Success\") {\n    msg.payload.attributes = {};\n    scroll_all_items(msg.payload.data, \"\");\n    msg.payload.attributes = returnvalue;\n    msg.payload.state = msg.payload.data.vip[0].current;\n    let currdate = new Date(); node.status(origpayload.msg + \" - \" + currdate.toLocaleString());\n    msg.payload.attributes.total = parseFloat(msg.payload.data.etotalFrom);\n    msg.payload.attributes.volt = msg.payload.data.vip[0].volt;\n    msg.payload.attributes.current = msg.payload.data.vip[0].current;\n    var gridonline = false;\n    if (parseFloat(msg.payload.data.vip[0].volt) < 200) { var gridonline = false } else { var gridonline = true }\n    msg.payload.attributes.gridonline = gridonline;\n    msg.payload.attributes.power = parseFloat(msg.payload.data.pac);\n    if (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\n    return msg;\n} else {\n    msg.payload = {};\n    node.status(origpayload.msg)\n    node.error({ state: origpayload.msg, data: origpayload });\n    return null;\n}",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 2280,
    "y": 980,
    "wires": [
      [
        "bcbae927f8d1c506"
      ]
    ]
  },
  {
    "id": "bbee4b12b7458fb4",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Sunsynk Load",
    "func": "if (typeof msg.payload === 'object') { } else {\n    if (msg.payload.includes(\"RequestError\")) {\n        node.status(\"Request Error\");\n    } else {\n        node.status(\"Unknown Error\");\n    }\n    node.error(msg.payload);\n    return null;\n}\n\nvar returnvalue = {};\n\nfunction scroll_all_items(s_payload, t_tkey) {\n    Object.entries(s_payload).forEach((entry) => {\n        const [key, value] = entry;\n        if (value === null || value === \"\") {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = \"Missing\"; }\n        } else if (s_payload[key].length === 0) {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        } else if (typeof s_payload[key] === 'object') {\n            if (Array.isArray(s_payload[key])) {\n                if (t_tkey === \"\") { process_array(s_payload[key], key); } else { process_array(s_payload[key], t_tkey + \"_\" + key); }\n            } else {\n                if (t_tkey === \"\") { scroll_all_items(s_payload[key], key); } else { scroll_all_items(s_payload[key], t_tkey + \"_\" + key); }\n            }\n        } else {\n            if (t_tkey === \"\") { returnvalue[key] = value; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        }\n    });\n    return;\n}\n\nfunction process_array(s_payload, t_tkey) {\n    if (t_tkey === \"infos_0_plantPermission\") { returnvalue[t_tkey] = \"Not Processed\" }\n    else {\n        for (let i = 0; i < s_payload.length; i++) {\n            scroll_all_items(s_payload[i], t_tkey + \"_\" + i);\n        }\n    }\n    return;\n}\n\n\nvar origpayload = msg.payload;\nif (origpayload.msg == \"Success\") {\n    msg.payload.attributes = {};\n    scroll_all_items(msg.payload.data, \"\");\n    msg.payload.attributes = returnvalue;\n    msg.payload.state = msg.payload.data.totalPower;\n    let currdate = new Date(); node.status(origpayload.msg + \" - \" + currdate.toLocaleString());\n    msg.payload.attributes.total = parseFloat(msg.payload.data.totalUsed);\n    msg.payload.attributes.volt = msg.payload.data.vip[0].volt;\n    msg.payload.attributes.power = msg.payload.data.totalPower;\n    msg.payload.attributes.totalpower = msg.payload.data.totalPower;\n    var tempcurrent = parseFloat(msg.payload.attributes.power) / parseFloat(msg.payload.attributes.volt);\n    msg.payload.attributes.calc_current = tempcurrent.toFixed(2);\n    if (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\n    return msg;\n} else {\n    msg.payload = {};\n    node.status(origpayload.msg)\n    node.error({ state: origpayload.msg, data: origpayload });\n    return null;\n}",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 2280,
    "y": 1040,
    "wires": [
      [
        "15c15f51a0594532"
      ]
    ]
  },
  {
    "id": "8c8cda34f2bbd079",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Sunsynk inverter Output",
    "func": "if (typeof msg.payload === 'object') { } else {\n    if (msg.payload.includes(\"RequestError\")) {\n        node.status(\"Request Error\");\n    } else {\n        node.status(\"Unknown Error\");\n    }\n    node.error(msg.payload);\n    return null;\n}\n\nvar returnvalue = {};\n\nfunction scroll_all_items(s_payload, t_tkey) {\n    Object.entries(s_payload).forEach((entry) => {\n        const [key, value] = entry;\n        if (value === null || value === \"\") {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = \"Missing\"; }\n        } else if (s_payload[key].length === 0) {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        } else if (typeof s_payload[key] === 'object') {\n            if (Array.isArray(s_payload[key])) {\n                if (t_tkey === \"\") { process_array(s_payload[key], key); } else { process_array(s_payload[key], t_tkey + \"_\" + key); }\n            } else {\n                if (t_tkey === \"\") { scroll_all_items(s_payload[key], key); } else { scroll_all_items(s_payload[key], t_tkey + \"_\" + key); }\n            }\n        } else {\n            if (t_tkey === \"\") { returnvalue[key] = value; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        }\n    });\n    return;\n}\n\nfunction process_array(s_payload, t_tkey) {\n    if (t_tkey === \"infos_0_plantPermission\") { returnvalue[t_tkey] = \"Not Processed\" }\n    else {\n        for (let i = 0; i < s_payload.length; i++) {\n            scroll_all_items(s_payload[i], t_tkey + \"_\" + i);\n        }\n    }\n    return;\n}\n\n\nvar origpayload = msg.payload;\nif (origpayload.msg == \"Success\") {\n    msg.payload.attributes = {};\n    scroll_all_items(msg.payload.data, \"\");\n    msg.payload.attributes = returnvalue;\n    msg.payload.state = \"Success\";\n    msg.payload.attributes.poweressentials = parseFloat(msg.payload.data.pac);\n    msg.payload.attributes.totalpower = parseFloat(msg.payload.data.pInv) + parseFloat(msg.payload.data.pac);\n    msg.payload.attributes.poweraux = parseFloat(msg.payload.data.pInv);\n    let currdate = new Date(); node.status(origpayload.msg + \" - \" + currdate.toLocaleString());\n    if (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\n    return msg;\n} else {\n    msg.payload = {};\n    node.status(origpayload.msg)\n    node.error({ state: origpayload.msg, data: origpayload });\n    return null;\n}\n",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 2310,
    "y": 800,
    "wires": [
      [
        "952c829a9f1f1407"
      ]
    ]
  },
  {
    "id": "9446ef9d4eba8b0b",
    "type": "delay",
    "z": "6593f488f7fef114",
    "name": "",
    "pauseType": "rate",
    "timeout": "5",
    "timeoutUnits": "seconds",
    "rate": "1",
    "nbRateUnits": "60",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": true,
    "allowrate": false,
    "outputs": 1,
    "x": 1420,
    "y": 720,
    "wires": [
      [
        "b22e5fcbbc693d2a",
        "8d113955f67e321b",
        "6549ef07c70aeda6",
        "938811aae3c23de5",
        "ac3df682f1025112",
        "6a7c1c8ff9f8c83d",
        "60255ff29104f118"
      ]
    ]
  },
  {
    "id": "fdbe4f7a064fed74",
    "type": "hass-post",
    "z": "6593f488f7fef114",
    "endpoint": "bc1c0f273da7bbae",
    "entityid": "sensor.sunsynk_battery_2",
    "name": "Update SunSynk Battery",
    "x": 2590,
    "y": 860,
    "wires": []
  },
  {
    "id": "952c829a9f1f1407",
    "type": "hass-post",
    "z": "6593f488f7fef114",
    "endpoint": "bc1c0f273da7bbae",
    "entityid": "sensor.sunsynk_output_2",
    "name": "Update SunSynk Output",
    "x": 2590,
    "y": 800,
    "wires": []
  },
  {
    "id": "72e175a1389dc7da",
    "type": "hass-post",
    "z": "6593f488f7fef114",
    "endpoint": "bc1c0f273da7bbae",
    "entityid": "sensor.sunsynk_input_2",
    "name": "Update SunSynk Input",
    "x": 2580,
    "y": 920,
    "wires": []
  },
  {
    "id": "bcbae927f8d1c506",
    "type": "hass-post",
    "z": "6593f488f7fef114",
    "endpoint": "bc1c0f273da7bbae",
    "entityid": "sensor.sunsynk_grid_2",
    "name": "Update SunSynk Grid",
    "x": 2580,
    "y": 980,
    "wires": []
  },
  {
    "id": "15c15f51a0594532",
    "type": "hass-post",
    "z": "6593f488f7fef114",
    "endpoint": "bc1c0f273da7bbae",
    "entityid": "sensor.sunsynk_load_2",
    "name": "Update SunSynk Load",
    "x": 2580,
    "y": 1040,
    "wires": []
  },
  {
    "id": "7514a5c7d0678bc8",
    "type": "hass-post",
    "z": "6593f488f7fef114",
    "endpoint": "bc1c0f273da7bbae",
    "entityid": "sensor.sunsynk_settings_2",
    "name": "Update SunSynk Settings",
    "x": 2590,
    "y": 1100,
    "wires": []
  },
  {
    "id": "db58db141b40b49c",
    "type": "debug",
    "z": "6593f488f7fef114",
    "d": true,
    "name": "inverter Serial Debug",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 1760,
    "y": 120,
    "wires": []
  },
  {
    "id": "dd9bbce2ceeb0c63",
    "type": "debug",
    "z": "6593f488f7fef114",
    "name": "Login Debug",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 850,
    "y": 120,
    "wires": []
  },
  {
    "id": "a07a5586581c2e83",
    "type": "debug",
    "z": "6593f488f7fef114",
    "name": "Plant List Debug",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 1120,
    "y": 280,
    "wires": []
  },
  {
    "id": "d589fae11a9bee6f",
    "type": "comment",
    "z": "6593f488f7fef114",
    "name": "Inverter 1 Flows",
    "info": "# Inverter 1 Flows",
    "x": 520,
    "y": 720,
    "wires": []
  },
  {
    "id": "160fa9514c97d0ef",
    "type": "comment",
    "z": "6593f488f7fef114",
    "name": "Inverter 2 Flows",
    "info": "# Inverter 2 Flows",
    "x": 1740,
    "y": 720,
    "wires": []
  },
  {
    "id": "5ea022e8eb8e2420",
    "type": "comment",
    "z": "6593f488f7fef114",
    "name": "^^^^ Set sunsynkdebug=1 for global debug",
    "info": "",
    "x": 220,
    "y": 220,
    "wires": []
  },
  {
    "id": "954a9ba791a5e263",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Create Request Plant Inverter List",
    "func": "msg.headers = global.get(\"SS.Header.Bearer\");\nmsg.url = global.get(\"SS.url.plantinvlist\");\nmsg.payload = \"\"\nlet currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString());\nif (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 700,
    "y": 420,
    "wires": [
      [
        "a43b651284b086f6"
      ]
    ]
  },
  {
    "id": "a43b651284b086f6",
    "type": "http request",
    "z": "6593f488f7fef114",
    "name": "Get Plant inverter List",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 1000,
    "y": 420,
    "wires": [
      [
        "c5de014727400ae8",
        "a538e10b2b5d7749",
        "ce74a7537821e5e6",
        "e297cc5a1f358c73"
      ]
    ]
  },
  {
    "id": "c5de014727400ae8",
    "type": "debug",
    "z": "6593f488f7fef114",
    "name": "Debug Plant inverter List",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 1390,
    "y": 380,
    "wires": []
  },
  {
    "id": "48097c01cb70bf59",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Get last 5 notifications",
    "func": "msg.headers = global.get(\"SS.Header.Bearer\");\nmsg.url = global.get(\"SS.url.notifications\");\nmsg.payload = \"\"\nlet currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString());\nif (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1360,
    "y": 160,
    "wires": [
      [
        "e841c8fc9cc10cf4"
      ]
    ]
  },
  {
    "id": "e841c8fc9cc10cf4",
    "type": "http request",
    "z": "6593f488f7fef114",
    "name": "Get Request",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 1570,
    "y": 160,
    "wires": [
      [
        "6645133ce18d56d9"
      ]
    ]
  },
  {
    "id": "6645133ce18d56d9",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Parse All Notifications",
    "func": "if (typeof msg.payload === 'object') { } else {\n    if (msg.payload.includes(\"RequestError\")) {\n        node.status(\"Request Error\");\n    } else {\n        node.status(\"Unknown Error\");\n    }\n    node.error(msg.payload);\n    return null;\n}\n\nvar recordtemp = [];\n\nif (msg.payload.data.infos.length > 0) {\n    for (let i = 0; i < msg.payload.data.infos.length; i++) {\n        var temptime = new Date(msg.payload.data.infos[i].createAt);\n //     var tempstation = msg.payload.data.infos[i].stationName;\n // Cut string down \n        var td = msg.payload.data.infos[i].description.replace(\"(#{stationName})\", msg.payload.data.infos[i].stationName + \" \");\n        td = td.replace(\"The system detects that your plant\", \"Plant \");\n        var tempdesc = temptime.toLocaleDateString() + \" \" + temptime.toLocaleTimeString() + \"  -  \"+ td;\n        recordtemp.push(tempdesc);\n        if (global.get(\"SunSynkDebug\") === 1) { node.error(recordtemp) }\n    }\n} else {\n    node.status(\"No Events Found\")\n    recordtemp.push(\"No Events Found\");\n    if (global.get(\"SunSynkDebug\") === 1) { node.error(recordtemp) }\n}\n\nvar origpayload = msg.payload;\nif (origpayload.msg == \"Success\") {\n    msg.payload = {};\n    msg.payload.attributes = {};\n//    msg.payload.attributes.test = \"written\";\n    msg.payload.attributes.ev = recordtemp;\n    msg.payload.state = origpayload.msg;\n    let currdate = new Date(); node.status(origpayload.msg + \" - \" + currdate.toLocaleString());\n    if (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\n    return msg;\n} else {\n    msg.payload = \"\";\n    msg.payload.attributes = \"\";\n    msg.payload.state = origpayload.msg;\n    node.error(origpayload.msg);\n    node.status(origpayload.msg);\n    return null;\n}\nreturn msg; ",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1780,
    "y": 160,
    "wires": [
      [
        "02afa5de645230de"
      ]
    ]
  },
  {
    "id": "02afa5de645230de",
    "type": "hass-post",
    "z": "6593f488f7fef114",
    "endpoint": "bc1c0f273da7bbae",
    "entityid": "sensor.sunsynk_notifications",
    "name": "Update Sunsynk Notifications",
    "x": 2020,
    "y": 160,
    "wires": []
  },
  {
    "id": "e1d8e298f8ae1215",
    "type": "delay",
    "z": "6593f488f7fef114",
    "name": "",
    "pauseType": "rate",
    "timeout": "5",
    "timeoutUnits": "seconds",
    "rate": "1",
    "nbRateUnits": "5",
    "rateUnits": "minute",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": true,
    "allowrate": false,
    "outputs": 1,
    "x": 1120,
    "y": 160,
    "wires": [
      [
        "48097c01cb70bf59"
      ]
    ]
  },
  {
    "id": "668814dc76869d6b",
    "type": "debug",
    "z": "6593f488f7fef114",
    "name": "Event Call Debug",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 1090,
    "y": 1560,
    "wires": []
  },
  {
    "id": "1dd5415455b1f5c5",
    "type": "comment",
    "z": "6593f488f7fef114",
    "name": "Created by Gary Waterworth on powerforum.co.za",
    "info": "Topic Link : https://powerforum.co.za/topic/16806-sunsynk-logger-integration-into-home-assistant/\n\nFeel free to use",
    "x": 210,
    "y": 440,
    "wires": []
  },
  {
    "id": "465eedd9c7a1ac0c",
    "type": "comment",
    "z": "6593f488f7fef114",
    "name": "https://powerforum.co.za/topic/16806-sunsynk-logger-integration-into-home-assistant/",
    "info": "Topic Link : https://powerforum.co.za/topic/16806-sunsynk-logger-integration-into-home-assistant/\n\nFeel free to use",
    "x": 310,
    "y": 480,
    "wires": []
  },
  {
    "id": "44b4fb3c8bd23c26",
    "type": "debug",
    "z": "6593f488f7fef114",
    "name": "Debug PantID",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 1360,
    "y": 340,
    "wires": []
  },
  {
    "id": "df5d7211c608060a",
    "type": "debug",
    "z": "6593f488f7fef114",
    "name": "Debug Inverter 1",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 1030,
    "y": 560,
    "wires": []
  },
  {
    "id": "e7b3422bcddcc13b",
    "type": "debug",
    "z": "6593f488f7fef114",
    "name": "Debug inverter 2",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 1750,
    "y": 560,
    "wires": []
  },
  {
    "id": "43067ea5dbc145da",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Create Request to get realtime output",
    "func": "msg.headers = global.get(\"SS.Header.Bearer\");\nmsg.url = global.get(\"SS.url.i1.acdc\");\nmsg.payload = \"\"\nlet currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString());\nif (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 530,
    "y": 1260,
    "wires": [
      [
        "d3f40f672a7bb339"
      ]
    ]
  },
  {
    "id": "d3f40f672a7bb339",
    "type": "http request",
    "z": "6593f488f7fef114",
    "name": "Get Request",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 810,
    "y": 1260,
    "wires": [
      [
        "ee20bade87be5efb"
      ]
    ]
  },
  {
    "id": "ee20bade87be5efb",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Parse Temp",
    "func": "if (typeof msg.payload === 'object') { } else {\n    if (msg.payload.includes(\"RequestError\")) {\n        node.status(\"Request Error\");\n    } else {\n        node.status(\"Unknown Error\");\n    }\n    node.error(msg.payload);\n    return null;\n}\nvar dctemp = msg.payload.data.infos[0].records[(msg.payload.data.infos[0].records.length) - 1].value;\nvar actemp = msg.payload.data.infos[1].records[(msg.payload.data.infos[1].records.length) - 1].value;\nif (global.get(\"SunSynkDebug\") === 1) \n{ \n    node.error(dctemp + \" - \" + msg.payload.data.infos[0].label);\n    node.error(actemp + \" - \" + msg.payload.data.infos[1].label);\n    node.error(msg); \n}\n\nvar dctime = [];\nvar dcvalue = [];\nif (msg.payload.data.infos[0].records.length > 0) {\n    for (let i = 0; i < msg.payload.data.infos[0].records.length; i++) {\n        var actimetemp = new Date(msg.payload.data.infos[0].records[i].time);\n        dctime.push(actimetemp);\n        dcvalue.push(msg.payload.data.infos[0].records[i].value)\n    }\n} else {\n    node.status(\"No Events Found\")\n}\n\nvar actime = [];\nvar acvalue = [];\nif (msg.payload.data.infos[1].records.length > 0) {\n    for (let i = 0; i < msg.payload.data.infos[1].records.length; i++) {\n        var actimetemp = new Date(msg.payload.data.infos[1].records[i].time); \n        actime.push(actimetemp);\n        acvalue.push(msg.payload.data.infos[1].records[i].value)\n    }\n} else\n{\n    node.status(\"No Events Found\")\n}\nif (global.get(\"SunSynkDebug\") === 1) {\n    node.error(actime);\n    node.error(acvalue);\n}\n\nvar origpayload = msg.payload;\nif (origpayload.msg == \"Success\") {\n    msg.payload = {};\n    msg.payload.attributes = {};\n//  msg.payload.attributes.data = origpayload.data;\n//  msg.payload.attributes.actime = actime;\n//  msg.payload.attributes.acvalue = acvalue;\n//  msg.payload.attributes.dctime = dctime;\n//  msg.payload.attributes.dcvalue = dcvalue;\n    msg.payload.attributes.dctemp = dctemp;\n    msg.payload.attributes.actemp = actemp;\n    msg.payload.state = origpayload.msg;\n    let currdate = new Date(); node.status(origpayload.msg + \" - \" + currdate.toLocaleString());\n    if (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\n    return msg;\n} else {\n    msg.payload = \"\";\n    msg.payload.attributes = \"\";\n    msg.payload.state = origpayload.msg;\n    node.error(origpayload.msg);\n    node.status(origpayload.msg);\n    return null;\n}\nreturn msg; \n ",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 990,
    "y": 1260,
    "wires": [
      [
        "c3deca02bdcd4137"
      ]
    ]
  },
  {
    "id": "1bec5e907e464879",
    "type": "comment",
    "z": "6593f488f7fef114",
    "name": "Inverter 1 Graphs",
    "info": "# Inverter 1 Graphs",
    "x": 480,
    "y": 1200,
    "wires": []
  },
  {
    "id": "c3deca02bdcd4137",
    "type": "hass-post",
    "z": "6593f488f7fef114",
    "endpoint": "bc1c0f273da7bbae",
    "entityid": "sensor.sunsynk_temp_data",
    "name": "Update Sunsynk Inv 1 Temperature Data",
    "x": 1340,
    "y": 1260,
    "wires": []
  },
  {
    "id": "b983c81db3fe97e6",
    "type": "http request",
    "z": "6593f488f7fef114",
    "name": "Get Request",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 1990,
    "y": 1260,
    "wires": [
      [
        "317ee3095bb03c6a"
      ]
    ]
  },
  {
    "id": "317ee3095bb03c6a",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Parse Temp",
    "func": "if (typeof msg.payload === 'object') { } else {\n    if (msg.payload.includes(\"RequestError\")) {\n        node.status(\"Request Error\");\n    } else {\n        node.status(\"Unknown Error\");\n    }\n    node.error(msg.payload);\n    return null;\n}\nvar dctemp = msg.payload.data.infos[0].records[(msg.payload.data.infos[0].records.length) - 1].value;\nvar actemp = msg.payload.data.infos[1].records[(msg.payload.data.infos[1].records.length) - 1].value;\nif (global.get(\"SunSynkDebug\") === 1) \n{ \n    node.error(dctemp + \" - \" + msg.payload.data.infos[0].label);\n    node.error(actemp + \" - \" + msg.payload.data.infos[1].label);\n    node.error(msg); \n}\n\nvar dctime = [];\nvar dcvalue = [];\nif (msg.payload.data.infos[0].records.length > 0) {\n    for (let i = 0; i < msg.payload.data.infos[0].records.length; i++) {\n        var actimetemp = new Date(msg.payload.data.infos[0].records[i].time);\n        dctime.push(actimetemp);\n        dcvalue.push(msg.payload.data.infos[0].records[i].value)\n    }\n} else {\n    node.status(\"No Events Found\")\n}\n\nvar actime = [];\nvar acvalue = [];\nif (msg.payload.data.infos[1].records.length > 0) {\n    for (let i = 0; i < msg.payload.data.infos[1].records.length; i++) {\n        var actimetemp = new Date(msg.payload.data.infos[1].records[i].time); \n        actime.push(actimetemp);\n        acvalue.push(msg.payload.data.infos[1].records[i].value)\n    }\n} else\n{\n    node.status(\"No Events Found\")\n}\nif (global.get(\"SunSynkDebug\") === 1) {\n    node.error(actime);\n    node.error(acvalue);\n}\n\nvar origpayload = msg.payload;\nif (origpayload.msg == \"Success\") {\n    msg.payload = {};\n    msg.payload.attributes = {};\n//    msg.payload.attributes.data = origpayload.data;\n    msg.payload.attributes.actime = actime;\n    msg.payload.attributes.acvalue = acvalue;\n    msg.payload.attributes.dctime = dctime;\n    msg.payload.attributes.dcvalue = dcvalue;\n    msg.payload.attributes.dctemp = dctemp;\n    msg.payload.attributes.actemp = actemp;\n    msg.payload.state = origpayload.msg;\n    let currdate = new Date(); node.status(origpayload.msg + \" - \" + currdate.toLocaleString());\n    if (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\n    return msg;\n} else {\n    msg.payload = \"\";\n    msg.payload.attributes = \"\";\n    msg.payload.state = origpayload.msg;\n    node.error(origpayload.msg);\n    node.status(origpayload.msg);\n    return null;\n}\nreturn msg; \n ",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 2250,
    "y": 1260,
    "wires": [
      [
        "250f0727e2b6fca4"
      ]
    ]
  },
  {
    "id": "aea4405fe28e7b44",
    "type": "comment",
    "z": "6593f488f7fef114",
    "name": "Inverter 1 Graphs",
    "info": "# Inverter 2 Graphs",
    "x": 1660,
    "y": 1200,
    "wires": []
  },
  {
    "id": "250f0727e2b6fca4",
    "type": "hass-post",
    "z": "6593f488f7fef114",
    "endpoint": "bc1c0f273da7bbae",
    "entityid": "sensor.sunsynk_temp_data_2",
    "name": "Update Sunsynk Inv 2 Temperature Data",
    "x": 2580,
    "y": 1260,
    "wires": []
  },
  {
    "id": "8911dd4bade9526f",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Setup Global Vars",
    "func": "node.status(\"\");\n//var graphdate = new Date();\n//\n//function dateToYMD(date) {\n//    var d = date.getDate();\n//    var m = date.getMonth() + 1; //Month from 0 to 11\n//    var y = date.getFullYear();\n//    return '' + y + '-' + (m <= 9 ? '0' + m : m) + '-' + (d <= 9 ? '0' + d : d);\n//}\n\nvar currentDate = (new Date().toJSON().slice(0, 10));\nfunction start_date() {\n    var fromdate = new Date();\n    fromdate.setDate(fromdate.getDate() - 60);\n    return fromdate.toJSON().slice(0, 10);\n}\n\n//  SET TO 1 TO ENABLE DEBUG MESSAGES \nglobal.set(\"SunSynkDebug\", 0);\n\n// Set HomeAssistant Gobal Context\nglobal.set(\"HA\", \"homeassistant.homeAssistant\");\n\n//Errors to Check\nvar ErrorCk = [undefined, \"unavailable\", \"DONOTEDIT\", \"\", \"0000000\", \"xxx@xxx.com\", \"xxx\" ]; \nglobal.set(\"SS.ErrorCk\",ErrorCk);\n//global.get(\"SS.ErrorCk\")\n\n\n// Setup variables\nvar items = global.get(global.get(\"HA\") + '.states[\\'sensor.sunsynk_return_items\\'].state');\nvar planturl = global.get(global.get(\"HA\") + '.states[\\'sensor.sunsynk_inverter_url\\'].state');\nif (ErrorCk.includes(items)) { let e = \"No Items Set\"; node.error(e); node.status(e); return null};\nif (ErrorCk.includes(planturl)) { let e = \"No Planturl Set\"; node.error(e); node.status(e); return null };\n\n// Notes set elsewhere\n// global.set(\"SS.Bearer\", msg.payload);\n// global.set(\"SS.Plantid\", msg.payload.data.infos[plantindex].id);\n// global.set(\"SS.inverter1sn\", origpayload.data.infos[invindex].sn);\n// global.set(\"SS.inverter2sn\", origpayload.data.infos[invindex].sn);\n\nif (ErrorCk.includes(global.get(\"SS.Plantid\"))) { let e = \"PlantID Set\" ; node.error(e); node.status(e); global.set(\"SS.Plantid\", \"DONOTEDIT\") };\nif (ErrorCk.includes(global.get(\"SS.inverter1sn\"))) { let e = \"inverter 1 Set\"; node.error(e); node.status(e); global.set(\"SS.inverter1sn\", \"DONOTEDIT\") };\nif (ErrorCk.includes(global.get(\"SS.inverter2sn\"))) { global.set(\"SS.inverter2sn\", \"DONOTEDIT\") };\n\n// Login String \nvar login = global.get(global.get(\"HA\") + '.states[\\'sensor.sunsynk_login\\'].state');\nvar password = global.get(global.get(\"HA\") + '.states[\\'sensor.sunsynk_password_new\\'].state');\nif (ErrorCk.includes(global.get(\"SS.Plantid\"))) { let e = \"PlantID Set\" ; node.error(e); node.status(e); global.set(\"SS.Plantid\", \"DONOTEDIT\") };\nif (ErrorCk.includes(global.get(\"SS.inverter1sn\"))) { let e = \"inverter 1 Set\"; node.error(e); node.status(e); global.set(\"SS.inverter1sn\", \"DONOTEDIT\") };\n\n// error checking\nif ((ErrorCk.includes(login)) || (ErrorCk.includes(password)))\n{ \n     node.error(\"Edit state setting in template please for login/password\"); \n     node.status(\"Edit state setting in template please for login/password\"); \n     global.set(\"SS.loginstring\", \"\");\n     global.set(\"SS.Header.Bearer\", \"\");     \n     global.set(\"SS.url.token\", \"\");\n     global.set(\"SS.url.plants\", \"\");\n     global.set(\"SS.url.notifications\", \"\");\n     global.set(\"SS.url.inverter_list\", \"\");\n     global.set(\"SS.url.events.1\", \"\");\n     global.set(\"SS.url.events.2\", \"\");\n     global.set(\"SS.url.events.3\", \"\");\n     return null ; \n} else\n{\n    // Setup Login Load\n    var loginstr = {};\n    loginstr.username = login;\n    loginstr.password = password;\n    loginstr.grant_type = \"password\";\n    loginstr.client_id = \"csp-web\";\n    // Sunsynk Region 2 extra info \n    loginstr.source = \"sunsynk\";\n    loginstr.areaCode = \"sunsynk\";\n    //{\"username\":\"xxx\",\"password\":\"xxx\",\"grant_type\":\"password\",\"client_id\":\"csp-web\",\"source\":\"sunsynk\",\"areaCode\":\"sunsynk\"}\n    global.set(\"SS.loginstring\", loginstr);\n\n    // Headers\n    var headers_with_bearer = {\n        Authorization: \"Bearer \" + global.get(\"SS.Bearer\"),\n        \"Content-Type\": \"application/json\",\n        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36\",\n        \"Connection\": \"keep-alive\",\n        \"Accept\": \"*/*\",\n        \"Cache-Control\": \"no-cache\",\n        \"Origin\": \"https://sunsynk.net\",\n        \"Referrer\": \"https://sunsynk.net\"\n    }\n    global.set(\"SS.Header.Bearer\", headers_with_bearer);\n\n    // Sunsynk V2 extra info \n    // global.get(\"SS.url.hostname\")\n    global.set(\"SS.url.hostname\",\"https://api.sunsynk.net\") ;\n    // global.set(\"SS.url.hostname\",\"https://pv.inteless.com\");\n\n    global.set(\"SS.url.token\",global.get(\"SS.url.hostname\") + \"/oauth/token\");\n    global.set(\"SS.url.plants\", global.get(\"SS.url.hostname\") + \"/api/v1/plants?page=1&limit=\" + items + \"&name=&status=\");\n    global.set(\"SS.url.notifications\", global.get(\"SS.url.hostname\") + \"/api/v1/messages?pageSize=5&pageNumber=1&status=-1&lan=en\");\n    global.set(\"SS.url.inverter_list\",global.get(\"SS.url.hostname\") + \"/api/v1/inverters?page=1&limit=\" + items + \"&status=-1&type=-1\");\n\n    // Events\n    global.set(\"SS.url.events.1\",global.get(\"SS.url.hostname\") + \"/api/v1/events\" + \"?type=1&page=1&limit=50&lan=en&sdate=\" + start_date() + \"&edate=\" + currentDate);\n    global.set(\"SS.url.events.2\",global.get(\"SS.url.hostname\") + \"/api/v1/events\" + \"?type=2&page=1&limit=50&lan=en&sdate=\" + start_date() + \"&edate=\" + currentDate);\n    global.set(\"SS.url.events.3\",global.get(\"SS.url.hostname\") + \"/api/v1/events\" + \"?type=3&page=1&limit=50&lan=en&sdate=\" + start_date() + \"&edate=\" + currentDate);\n}\n\nif (ErrorCk.includes(global.get(\"SS.Plantid\")) || ErrorCk.includes(global.get(\"SS.url.hostname\"))) \n{ \n    node.error(\"Plant ID\"); node.status(\"Pant ID\"); \n    global.set(\"SS.url.flow\", \"\");\n    global.set(\"SS.url.plantinvlist\", \"\");\n} else {}\n//{ \n//    global.set(\"SS.url.flow\",global.get(\"SS.url.hostname\") + \"/api/v1/plant/energy/\" + global.get(\"SS.Plantid\") + \"/flow\");\n//    global.set(\"SS.url.plantinvlist\",global.get(\"SS.url.hostname\") + \"/api/v1/plant/\" + global.get(\"SS.Plantid\") + \"/inverters?page=1&limit=\" + items + \"&status=-1&type=-2\");\n//}\n\nif (ErrorCk.includes(global.get(\"SS.inverter1sn\")) || ErrorCk.includes(global.get(\"SS.url.hostname\"))) \n{ \n    node.error(\"Inv 1 SN\"); node.status(\"Inv 1 SN\"); \n    global.set(\"SS.url.i1.output\", \"\");\n    global.set(\"SS.url.i1.battery\", \"\");\n    global.set(\"SS.url.i1.input\", \"\");\n    global.set(\"SS.url.i1.grid\", \"\");\n    global.set(\"SS.url.i1.load\", \"\");\n    global.set(\"SS.url.i1.settings\", \"\");\n    global.set(\"SS.url.i1.acdc\", \"\");\n    global.set(\"SS.url.i1.set\", \"\");\n\n} else {}\n//{ \n//    global.set(\"SS.url.i1.output\",global.get(\"SS.url.hostname\") + \"/api/v1/inverter/\" + global.get(\"SS.inverter1sn\") + \"/realtime/output\");\n//    global.set(\"SS.url.i1.battery\",global.get(\"SS.url.hostname\") + \"/api/v1/inverter/battery/\" + global.get(\"SS.inverter1sn\") + \"/realtime?sn=\" + global.get(\"SS.inverter1sn\") + \"&lan\");\n//    global.set(\"SS.url.i1.input\",global.get(\"SS.url.hostname\") + \"/api/v1/inverter/\" + global.get(\"SS.inverter1sn\") + \"/realtime/input\");\n//    global.set(\"SS.url.i1.grid\",global.get(\"SS.url.hostname\") + \"/api/v1/inverter/grid/\" + global.get(\"SS.inverter1sn\") + \"/realtime?sn=\" + global.get(\"SS.inverter1sn\"));\n//    global.set(\"SS.url.i1.load\",global.get(\"SS.url.hostname\") + \"/api/v1/inverter/load/\" + global.get(\"SS.inverter1sn\") + \"/realtime?sn=\" + global.get(\"SS.inverter1sn\"));\n//    global.set(\"SS.url.i1.settings\",global.get(\"SS.url.hostname\") + \"/api/v1/common/setting/\" + global.get(\"SS.inverter1sn\") + \"/read\");\n//    global.set(\"SS.url.i1.acdc\",global.get(\"SS.url.hostname\") + \"/api/v1/inverter/\" + global.get(\"SS.inverter1sn\") + \"/output/day?lan=en&date=\" + dateToYMD(graphdate) + \"&column=dc_temp,igbt_temp\");\n//    global.set(\"SS.url.i1.set\",global.get(\"SS.url.hostname\") + \"/api/v1/common/setting/\" + global.get(\"SS.inverter1sn\") + \"/set\");\n//}\n\nif (ErrorCk.includes(global.get(\"SS.inverter2sn\")) || ErrorCk.includes(global.get(\"SS.url.hostname\"))) \n{  \n    global.set(\"SS.url.i2.output\",\"\");\n    global.set(\"SS.url.i2.battery\", \"\");\n    global.set(\"SS.url.i2.input\", \"\");\n    global.set(\"SS.url.i2.grid\", \"\");\n    global.set(\"SS.url.i2.load\", \"\");\n    global.set(\"SS.url.i2.settings\", \"\");\n    global.set(\"SS.url.i2.acdc\", \"\");\n    global.set(\"SS.url.i2.set\", \"\");\n} else {} \n//{ \n//    global.set(\"SS.url.i2.output\",global.get(\"SS.url.hostname\") + \"/api/v1/inverter/\" + global.get(\"SS.inverter2sn\") + \"/realtime/output\");\n//    global.set(\"SS.url.i2.battery\",global.get(\"SS.url.hostname\") + \"/api/v1/inverter/battery/\" + global.get(\"SS.inverter2sn\") + \"/realtime?sn=\" + global.get(\"SS.inverter2sn\") + \"&lan\");\n//    global.set(\"SS.url.i2.input\",global.get(\"SS.url.hostname\") + \"/api/v1/inverter/\" + global.get(\"SS.inverter2sn\") + \"/realtime/input\");\n//    global.set(\"SS.url.i2.grid\",global.get(\"SS.url.hostname\") + \"/api/v1/inverter/grid/\" + global.get(\"SS.inverter2sn\") + \"/realtime?sn=\" + global.get(\"SS.inverter2sn\"));\n//    global.set(\"SS.url.i2.load\",global.get(\"SS.url.hostname\") + \"/api/v1/inverter/load/\" + global.get(\"SS.inverter2sn\") + \"/realtime?sn=\" + global.get(\"SS.inverter2sn\"));\n//    global.set(\"SS.url.i2.settings\",global.get(\"SS.url.hostname\") + \"/api/v1/common/setting/\" + global.get(\"SS.inverter2sn\") + \"/read\");\n//    global.set(\"SS.url.i2.acdc\",global.get(\"SS.url.hostname\") + \"/api/v1/inverter/\" + global.get(\"SS.inverter2sn\") + \"/output/day?lan=en&date=\" + dateToYMD(graphdate) + \"&column=dc_temp,igbt_temp\");\n//    global.set(\"SS.url.i2.set\",global.get(\"SS.url.hostname\") + \"/api/v1/common/setting/\" + global.get(\"SS.inverter2sn\") + \"/set\");\n//}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 150,
    "y": 160,
    "wires": [
      [
        "d6392b7bb7c92644",
        "7d800890195450be"
      ]
    ]
  },
  {
    "id": "7ed2ad5863c2eb0a",
    "type": "comment",
    "z": "6593f488f7fef114",
    "name": "Events",
    "info": "# Inverter 1 Graphs",
    "x": 450,
    "y": 1340,
    "wires": []
  },
  {
    "id": "8d113955f67e321b",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Create Request for Getting battery Info",
    "func": "msg.headers = global.get(\"SS.Header.Bearer\");\nmsg.url = global.get(\"SS.url.i2.battery\");\nmsg.payload=\"\";\nlet currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString());\nif (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1730,
    "y": 860,
    "wires": [
      [
        "21f1ade9a0c01e99"
      ]
    ]
  },
  {
    "id": "6a7c1c8ff9f8c83d",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Create Request for Getting inverter Settings",
    "func": "msg.headers = global.get(\"SS.Header.Bearer\");\nmsg.url = global.get(\"SS.url.i2.settings\");\nmsg.payload=\"\"\nlet currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString());\nif (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1750,
    "y": 1100,
    "wires": [
      [
        "3d4b73b95be38d13"
      ]
    ]
  },
  {
    "id": "938811aae3c23de5",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Create Request for Getting Grid Info",
    "func": "msg.headers = global.get(\"SS.Header.Bearer\");\nmsg.url = global.get(\"SS.url.i2.grid\");\nmsg.payload=\"\";\nlet currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString());\nif (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1730,
    "y": 980,
    "wires": [
      [
        "9f05aa35669d88e1"
      ]
    ]
  },
  {
    "id": "ac3df682f1025112",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Create Request for Getting Load Info",
    "func": "msg.headers = global.get(\"SS.Header.Bearer\");\nmsg.url = global.get(\"SS.url.i2.load\");\nmsg.payload=\"\";\nlet currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString());\nif (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1730,
    "y": 1040,
    "wires": [
      [
        "6dd9af42374901bb"
      ]
    ]
  },
  {
    "id": "6549ef07c70aeda6",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Create Request for Getting Input",
    "func": "msg.headers = global.get(\"SS.Header.Bearer\");\nmsg.url = global.get(\"SS.url.i2.input\");\nlet currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString());\nif (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1710,
    "y": 920,
    "wires": [
      [
        "c057e64c9fd3df8e"
      ]
    ]
  },
  {
    "id": "b22e5fcbbc693d2a",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Create Request for Getting Output",
    "func": "msg.headers = global.get(\"SS.Header.Bearer\");\nmsg.url = global.get(\"SS.url.i2.output\");\nmsg.payload=\"\";\nlet currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString());\nif (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1720,
    "y": 800,
    "wires": [
      [
        "0211ec7b69137a9f"
      ]
    ]
  },
  {
    "id": "60255ff29104f118",
    "type": "function",
    "z": "6593f488f7fef114",
    "name": "Create Request to get realtime output",
    "func": "msg.headers = global.get(\"SS.Header.Bearer\");\nmsg.url = global.get(\"SS.url.i2.acdc\");\nmsg.payload = \"\"\nlet currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString());\nif (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1730,
    "y": 1260,
    "wires": [
      []
    ]
  },
  {
    "id": "bc1c0f273da7bbae",
    "type": "hass-config",
    "host": "http://localhost",
    "port": "8123"
  }
]
